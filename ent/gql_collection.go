// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (a *ApplicantQuery) CollectFields(ctx context.Context, satisfies ...string) *ApplicantQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		a = a.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return a
}

func (a *ApplicantQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *ApplicantQuery {
	return a
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (c *CompetitionQuery) CollectFields(ctx context.Context, satisfies ...string) *CompetitionQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		c = c.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return c
}

func (c *CompetitionQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *CompetitionQuery {
	return c
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pr *PrefectureQuery) CollectFields(ctx context.Context, satisfies ...string) *PrefectureQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		pr = pr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return pr
}

func (pr *PrefectureQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *PrefectureQuery {
	return pr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (r *RecruitmentQuery) CollectFields(ctx context.Context, satisfies ...string) *RecruitmentQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		r = r.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return r
}

func (r *RecruitmentQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *RecruitmentQuery {
	return r
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (rt *RecruitmentTagQuery) CollectFields(ctx context.Context, satisfies ...string) *RecruitmentTagQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		rt = rt.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return rt
}

func (rt *RecruitmentTagQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *RecruitmentTagQuery {
	return rt
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (s *StockQuery) CollectFields(ctx context.Context, satisfies ...string) *StockQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		s = s.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return s
}

func (s *StockQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *StockQuery {
	return s
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TagQuery) CollectFields(ctx context.Context, satisfies ...string) *TagQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		t = t.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return t
}

func (t *TagQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *TagQuery {
	return t
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}
