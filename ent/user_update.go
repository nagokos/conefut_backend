// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nagokos/connefut_backend/ent/applicant"
	"github.com/nagokos/connefut_backend/ent/predicate"
	"github.com/nagokos/connefut_backend/ent/recruitment"
	"github.com/nagokos/connefut_backend/ent/stock"
	"github.com/nagokos/connefut_backend/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(u user.Role) *UserUpdate {
	uu.mutation.SetRole(u)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(u *user.Role) *UserUpdate {
	if u != nil {
		uu.SetRole(*u)
	}
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetIntroduction sets the "introduction" field.
func (uu *UserUpdate) SetIntroduction(s string) *UserUpdate {
	uu.mutation.SetIntroduction(s)
	return uu
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIntroduction(s *string) *UserUpdate {
	if s != nil {
		uu.SetIntroduction(*s)
	}
	return uu
}

// ClearIntroduction clears the value of the "introduction" field.
func (uu *UserUpdate) ClearIntroduction() *UserUpdate {
	uu.mutation.ClearIntroduction()
	return uu
}

// SetEmailVerificationStatus sets the "email_verification_status" field.
func (uu *UserUpdate) SetEmailVerificationStatus(uvs user.EmailVerificationStatus) *UserUpdate {
	uu.mutation.SetEmailVerificationStatus(uvs)
	return uu
}

// SetNillableEmailVerificationStatus sets the "email_verification_status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerificationStatus(uvs *user.EmailVerificationStatus) *UserUpdate {
	if uvs != nil {
		uu.SetEmailVerificationStatus(*uvs)
	}
	return uu
}

// SetEmailVerificationToken sets the "email_verification_token" field.
func (uu *UserUpdate) SetEmailVerificationToken(s string) *UserUpdate {
	uu.mutation.SetEmailVerificationToken(s)
	return uu
}

// SetNillableEmailVerificationToken sets the "email_verification_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerificationToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmailVerificationToken(*s)
	}
	return uu
}

// ClearEmailVerificationToken clears the value of the "email_verification_token" field.
func (uu *UserUpdate) ClearEmailVerificationToken() *UserUpdate {
	uu.mutation.ClearEmailVerificationToken()
	return uu
}

// SetEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field.
func (uu *UserUpdate) SetEmailVerificationTokenExpiresAt(t time.Time) *UserUpdate {
	uu.mutation.SetEmailVerificationTokenExpiresAt(t)
	return uu
}

// SetNillableEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailVerificationTokenExpiresAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetEmailVerificationTokenExpiresAt(*t)
	}
	return uu
}

// ClearEmailVerificationTokenExpiresAt clears the value of the "email_verification_token_expires_at" field.
func (uu *UserUpdate) ClearEmailVerificationTokenExpiresAt() *UserUpdate {
	uu.mutation.ClearEmailVerificationTokenExpiresAt()
	return uu
}

// SetPasswordDigest sets the "password_digest" field.
func (uu *UserUpdate) SetPasswordDigest(s string) *UserUpdate {
	uu.mutation.SetPasswordDigest(s)
	return uu
}

// SetNillablePasswordDigest sets the "password_digest" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePasswordDigest(s *string) *UserUpdate {
	if s != nil {
		uu.SetPasswordDigest(*s)
	}
	return uu
}

// ClearPasswordDigest clears the value of the "password_digest" field.
func (uu *UserUpdate) ClearPasswordDigest() *UserUpdate {
	uu.mutation.ClearPasswordDigest()
	return uu
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (uu *UserUpdate) SetLastSignInAt(t time.Time) *UserUpdate {
	uu.mutation.SetLastSignInAt(t)
	return uu
}

// SetNillableLastSignInAt sets the "last_sign_in_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastSignInAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLastSignInAt(*t)
	}
	return uu
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (uu *UserUpdate) ClearLastSignInAt() *UserUpdate {
	uu.mutation.ClearLastSignInAt()
	return uu
}

// AddRecruitmentIDs adds the "recruitments" edge to the Recruitment entity by IDs.
func (uu *UserUpdate) AddRecruitmentIDs(ids ...string) *UserUpdate {
	uu.mutation.AddRecruitmentIDs(ids...)
	return uu
}

// AddRecruitments adds the "recruitments" edges to the Recruitment entity.
func (uu *UserUpdate) AddRecruitments(r ...*Recruitment) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.AddRecruitmentIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (uu *UserUpdate) AddStockIDs(ids ...string) *UserUpdate {
	uu.mutation.AddStockIDs(ids...)
	return uu
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (uu *UserUpdate) AddStocks(s ...*Stock) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStockIDs(ids...)
}

// AddApplicantIDs adds the "applicants" edge to the Applicant entity by IDs.
func (uu *UserUpdate) AddApplicantIDs(ids ...string) *UserUpdate {
	uu.mutation.AddApplicantIDs(ids...)
	return uu
}

// AddApplicants adds the "applicants" edges to the Applicant entity.
func (uu *UserUpdate) AddApplicants(a ...*Applicant) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddApplicantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearRecruitments clears all "recruitments" edges to the Recruitment entity.
func (uu *UserUpdate) ClearRecruitments() *UserUpdate {
	uu.mutation.ClearRecruitments()
	return uu
}

// RemoveRecruitmentIDs removes the "recruitments" edge to Recruitment entities by IDs.
func (uu *UserUpdate) RemoveRecruitmentIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveRecruitmentIDs(ids...)
	return uu
}

// RemoveRecruitments removes "recruitments" edges to Recruitment entities.
func (uu *UserUpdate) RemoveRecruitments(r ...*Recruitment) *UserUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uu.RemoveRecruitmentIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (uu *UserUpdate) ClearStocks() *UserUpdate {
	uu.mutation.ClearStocks()
	return uu
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (uu *UserUpdate) RemoveStockIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveStockIDs(ids...)
	return uu
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (uu *UserUpdate) RemoveStocks(s ...*Stock) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStockIDs(ids...)
}

// ClearApplicants clears all "applicants" edges to the Applicant entity.
func (uu *UserUpdate) ClearApplicants() *UserUpdate {
	uu.mutation.ClearApplicants()
	return uu
}

// RemoveApplicantIDs removes the "applicants" edge to Applicant entities by IDs.
func (uu *UserUpdate) RemoveApplicantIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveApplicantIDs(ids...)
	return uu
}

// RemoveApplicants removes "applicants" edges to Applicant entities.
func (uu *UserUpdate) RemoveApplicants(a ...*Applicant) *UserUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveApplicantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uu.defaults()
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Introduction(); ok {
		if err := user.IntroductionValidator(v); err != nil {
			return &ValidationError{Name: "introduction", err: fmt.Errorf(`ent: validator failed for field "User.introduction": %w`, err)}
		}
	}
	if v, ok := uu.mutation.EmailVerificationStatus(); ok {
		if err := user.EmailVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "email_verification_status", err: fmt.Errorf(`ent: validator failed for field "User.email_verification_status": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
	}
	if value, ok := uu.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIntroduction,
		})
	}
	if uu.mutation.IntroductionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldIntroduction,
		})
	}
	if value, ok := uu.mutation.EmailVerificationStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldEmailVerificationStatus,
		})
	}
	if value, ok := uu.mutation.EmailVerificationToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmailVerificationToken,
		})
	}
	if uu.mutation.EmailVerificationTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldEmailVerificationToken,
		})
	}
	if value, ok := uu.mutation.EmailVerificationTokenExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldEmailVerificationTokenExpiresAt,
		})
	}
	if uu.mutation.EmailVerificationTokenExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldEmailVerificationTokenExpiresAt,
		})
	}
	if value, ok := uu.mutation.PasswordDigest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPasswordDigest,
		})
	}
	if uu.mutation.PasswordDigestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPasswordDigest,
		})
	}
	if value, ok := uu.mutation.LastSignInAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastSignInAt,
		})
	}
	if uu.mutation.LastSignInAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldLastSignInAt,
		})
	}
	if uu.mutation.RecruitmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecruitmentsTable,
			Columns: []string{user.RecruitmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedRecruitmentsIDs(); len(nodes) > 0 && !uu.mutation.RecruitmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecruitmentsTable,
			Columns: []string{user.RecruitmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RecruitmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecruitmentsTable,
			Columns: []string{user.RecruitmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StocksTable,
			Columns: []string{user.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stock.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStocksIDs(); len(nodes) > 0 && !uu.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StocksTable,
			Columns: []string{user.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StocksTable,
			Columns: []string{user.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApplicantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantsTable,
			Columns: []string{user.ApplicantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: applicant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApplicantsIDs(); len(nodes) > 0 && !uu.mutation.ApplicantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantsTable,
			Columns: []string{user.ApplicantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: applicant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApplicantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantsTable,
			Columns: []string{user.ApplicantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: applicant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(u user.Role) *UserUpdateOne {
	uuo.mutation.SetRole(u)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(u *user.Role) *UserUpdateOne {
	if u != nil {
		uuo.SetRole(*u)
	}
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetIntroduction sets the "introduction" field.
func (uuo *UserUpdateOne) SetIntroduction(s string) *UserUpdateOne {
	uuo.mutation.SetIntroduction(s)
	return uuo
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIntroduction(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetIntroduction(*s)
	}
	return uuo
}

// ClearIntroduction clears the value of the "introduction" field.
func (uuo *UserUpdateOne) ClearIntroduction() *UserUpdateOne {
	uuo.mutation.ClearIntroduction()
	return uuo
}

// SetEmailVerificationStatus sets the "email_verification_status" field.
func (uuo *UserUpdateOne) SetEmailVerificationStatus(uvs user.EmailVerificationStatus) *UserUpdateOne {
	uuo.mutation.SetEmailVerificationStatus(uvs)
	return uuo
}

// SetNillableEmailVerificationStatus sets the "email_verification_status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerificationStatus(uvs *user.EmailVerificationStatus) *UserUpdateOne {
	if uvs != nil {
		uuo.SetEmailVerificationStatus(*uvs)
	}
	return uuo
}

// SetEmailVerificationToken sets the "email_verification_token" field.
func (uuo *UserUpdateOne) SetEmailVerificationToken(s string) *UserUpdateOne {
	uuo.mutation.SetEmailVerificationToken(s)
	return uuo
}

// SetNillableEmailVerificationToken sets the "email_verification_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerificationToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmailVerificationToken(*s)
	}
	return uuo
}

// ClearEmailVerificationToken clears the value of the "email_verification_token" field.
func (uuo *UserUpdateOne) ClearEmailVerificationToken() *UserUpdateOne {
	uuo.mutation.ClearEmailVerificationToken()
	return uuo
}

// SetEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field.
func (uuo *UserUpdateOne) SetEmailVerificationTokenExpiresAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetEmailVerificationTokenExpiresAt(t)
	return uuo
}

// SetNillableEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailVerificationTokenExpiresAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetEmailVerificationTokenExpiresAt(*t)
	}
	return uuo
}

// ClearEmailVerificationTokenExpiresAt clears the value of the "email_verification_token_expires_at" field.
func (uuo *UserUpdateOne) ClearEmailVerificationTokenExpiresAt() *UserUpdateOne {
	uuo.mutation.ClearEmailVerificationTokenExpiresAt()
	return uuo
}

// SetPasswordDigest sets the "password_digest" field.
func (uuo *UserUpdateOne) SetPasswordDigest(s string) *UserUpdateOne {
	uuo.mutation.SetPasswordDigest(s)
	return uuo
}

// SetNillablePasswordDigest sets the "password_digest" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePasswordDigest(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPasswordDigest(*s)
	}
	return uuo
}

// ClearPasswordDigest clears the value of the "password_digest" field.
func (uuo *UserUpdateOne) ClearPasswordDigest() *UserUpdateOne {
	uuo.mutation.ClearPasswordDigest()
	return uuo
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (uuo *UserUpdateOne) SetLastSignInAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastSignInAt(t)
	return uuo
}

// SetNillableLastSignInAt sets the "last_sign_in_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastSignInAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLastSignInAt(*t)
	}
	return uuo
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (uuo *UserUpdateOne) ClearLastSignInAt() *UserUpdateOne {
	uuo.mutation.ClearLastSignInAt()
	return uuo
}

// AddRecruitmentIDs adds the "recruitments" edge to the Recruitment entity by IDs.
func (uuo *UserUpdateOne) AddRecruitmentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddRecruitmentIDs(ids...)
	return uuo
}

// AddRecruitments adds the "recruitments" edges to the Recruitment entity.
func (uuo *UserUpdateOne) AddRecruitments(r ...*Recruitment) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.AddRecruitmentIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (uuo *UserUpdateOne) AddStockIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddStockIDs(ids...)
	return uuo
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (uuo *UserUpdateOne) AddStocks(s ...*Stock) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStockIDs(ids...)
}

// AddApplicantIDs adds the "applicants" edge to the Applicant entity by IDs.
func (uuo *UserUpdateOne) AddApplicantIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddApplicantIDs(ids...)
	return uuo
}

// AddApplicants adds the "applicants" edges to the Applicant entity.
func (uuo *UserUpdateOne) AddApplicants(a ...*Applicant) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddApplicantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearRecruitments clears all "recruitments" edges to the Recruitment entity.
func (uuo *UserUpdateOne) ClearRecruitments() *UserUpdateOne {
	uuo.mutation.ClearRecruitments()
	return uuo
}

// RemoveRecruitmentIDs removes the "recruitments" edge to Recruitment entities by IDs.
func (uuo *UserUpdateOne) RemoveRecruitmentIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveRecruitmentIDs(ids...)
	return uuo
}

// RemoveRecruitments removes "recruitments" edges to Recruitment entities.
func (uuo *UserUpdateOne) RemoveRecruitments(r ...*Recruitment) *UserUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uuo.RemoveRecruitmentIDs(ids...)
}

// ClearStocks clears all "stocks" edges to the Stock entity.
func (uuo *UserUpdateOne) ClearStocks() *UserUpdateOne {
	uuo.mutation.ClearStocks()
	return uuo
}

// RemoveStockIDs removes the "stocks" edge to Stock entities by IDs.
func (uuo *UserUpdateOne) RemoveStockIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveStockIDs(ids...)
	return uuo
}

// RemoveStocks removes "stocks" edges to Stock entities.
func (uuo *UserUpdateOne) RemoveStocks(s ...*Stock) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStockIDs(ids...)
}

// ClearApplicants clears all "applicants" edges to the Applicant entity.
func (uuo *UserUpdateOne) ClearApplicants() *UserUpdateOne {
	uuo.mutation.ClearApplicants()
	return uuo
}

// RemoveApplicantIDs removes the "applicants" edge to Applicant entities by IDs.
func (uuo *UserUpdateOne) RemoveApplicantIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveApplicantIDs(ids...)
	return uuo
}

// RemoveApplicants removes "applicants" edges to Applicant entities.
func (uuo *UserUpdateOne) RemoveApplicants(a ...*Applicant) *UserUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveApplicantIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uuo.defaults()
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Introduction(); ok {
		if err := user.IntroductionValidator(v); err != nil {
			return &ValidationError{Name: "introduction", err: fmt.Errorf(`ent: validator failed for field "User.introduction": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.EmailVerificationStatus(); ok {
		if err := user.EmailVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "email_verification_status", err: fmt.Errorf(`ent: validator failed for field "User.email_verification_status": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
	}
	if value, ok := uuo.mutation.Introduction(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIntroduction,
		})
	}
	if uuo.mutation.IntroductionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldIntroduction,
		})
	}
	if value, ok := uuo.mutation.EmailVerificationStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldEmailVerificationStatus,
		})
	}
	if value, ok := uuo.mutation.EmailVerificationToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmailVerificationToken,
		})
	}
	if uuo.mutation.EmailVerificationTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldEmailVerificationToken,
		})
	}
	if value, ok := uuo.mutation.EmailVerificationTokenExpiresAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldEmailVerificationTokenExpiresAt,
		})
	}
	if uuo.mutation.EmailVerificationTokenExpiresAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldEmailVerificationTokenExpiresAt,
		})
	}
	if value, ok := uuo.mutation.PasswordDigest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPasswordDigest,
		})
	}
	if uuo.mutation.PasswordDigestCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPasswordDigest,
		})
	}
	if value, ok := uuo.mutation.LastSignInAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastSignInAt,
		})
	}
	if uuo.mutation.LastSignInAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldLastSignInAt,
		})
	}
	if uuo.mutation.RecruitmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecruitmentsTable,
			Columns: []string{user.RecruitmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedRecruitmentsIDs(); len(nodes) > 0 && !uuo.mutation.RecruitmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecruitmentsTable,
			Columns: []string{user.RecruitmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RecruitmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecruitmentsTable,
			Columns: []string{user.RecruitmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StocksTable,
			Columns: []string{user.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stock.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStocksIDs(); len(nodes) > 0 && !uuo.mutation.StocksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StocksTable,
			Columns: []string{user.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StocksTable,
			Columns: []string{user.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApplicantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantsTable,
			Columns: []string{user.ApplicantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: applicant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApplicantsIDs(); len(nodes) > 0 && !uuo.mutation.ApplicantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantsTable,
			Columns: []string{user.ApplicantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: applicant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApplicantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantsTable,
			Columns: []string{user.ApplicantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: applicant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
