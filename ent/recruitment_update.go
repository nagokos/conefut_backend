// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nagokos/connefut_backend/ent/predicate"
	"github.com/nagokos/connefut_backend/ent/recruitment"
)

// RecruitmentUpdate is the builder for updating Recruitment entities.
type RecruitmentUpdate struct {
	config
	hooks    []Hook
	mutation *RecruitmentMutation
}

// Where appends a list predicates to the RecruitmentUpdate builder.
func (ru *RecruitmentUpdate) Where(ps ...predicate.Recruitment) *RecruitmentUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RecruitmentUpdate) SetUpdatedAt(t time.Time) *RecruitmentUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetTitle sets the "title" field.
func (ru *RecruitmentUpdate) SetTitle(s string) *RecruitmentUpdate {
	ru.mutation.SetTitle(s)
	return ru
}

// SetType sets the "type" field.
func (ru *RecruitmentUpdate) SetType(r recruitment.Type) *RecruitmentUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ru *RecruitmentUpdate) SetNillableType(r *recruitment.Type) *RecruitmentUpdate {
	if r != nil {
		ru.SetType(*r)
	}
	return ru
}

// SetPlace sets the "place" field.
func (ru *RecruitmentUpdate) SetPlace(s string) *RecruitmentUpdate {
	ru.mutation.SetPlace(s)
	return ru
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (ru *RecruitmentUpdate) SetNillablePlace(s *string) *RecruitmentUpdate {
	if s != nil {
		ru.SetPlace(*s)
	}
	return ru
}

// ClearPlace clears the value of the "place" field.
func (ru *RecruitmentUpdate) ClearPlace() *RecruitmentUpdate {
	ru.mutation.ClearPlace()
	return ru
}

// SetStartAt sets the "start_at" field.
func (ru *RecruitmentUpdate) SetStartAt(t time.Time) *RecruitmentUpdate {
	ru.mutation.SetStartAt(t)
	return ru
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ru *RecruitmentUpdate) SetNillableStartAt(t *time.Time) *RecruitmentUpdate {
	if t != nil {
		ru.SetStartAt(*t)
	}
	return ru
}

// ClearStartAt clears the value of the "start_at" field.
func (ru *RecruitmentUpdate) ClearStartAt() *RecruitmentUpdate {
	ru.mutation.ClearStartAt()
	return ru
}

// SetContent sets the "content" field.
func (ru *RecruitmentUpdate) SetContent(s string) *RecruitmentUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetLocationURL sets the "Location_url" field.
func (ru *RecruitmentUpdate) SetLocationURL(s string) *RecruitmentUpdate {
	ru.mutation.SetLocationURL(s)
	return ru
}

// SetNillableLocationURL sets the "Location_url" field if the given value is not nil.
func (ru *RecruitmentUpdate) SetNillableLocationURL(s *string) *RecruitmentUpdate {
	if s != nil {
		ru.SetLocationURL(*s)
	}
	return ru
}

// ClearLocationURL clears the value of the "Location_url" field.
func (ru *RecruitmentUpdate) ClearLocationURL() *RecruitmentUpdate {
	ru.mutation.ClearLocationURL()
	return ru
}

// SetCapacity sets the "capacity" field.
func (ru *RecruitmentUpdate) SetCapacity(i int) *RecruitmentUpdate {
	ru.mutation.ResetCapacity()
	ru.mutation.SetCapacity(i)
	return ru
}

// AddCapacity adds i to the "capacity" field.
func (ru *RecruitmentUpdate) AddCapacity(i int) *RecruitmentUpdate {
	ru.mutation.AddCapacity(i)
	return ru
}

// SetClosingAt sets the "closing_at" field.
func (ru *RecruitmentUpdate) SetClosingAt(t time.Time) *RecruitmentUpdate {
	ru.mutation.SetClosingAt(t)
	return ru
}

// Mutation returns the RecruitmentMutation object of the builder.
func (ru *RecruitmentUpdate) Mutation() *RecruitmentMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecruitmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecruitmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecruitmentUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecruitmentUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecruitmentUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecruitmentUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := recruitment.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RecruitmentUpdate) check() error {
	if v, ok := ru.mutation.Title(); ok {
		if err := recruitment.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := ru.mutation.GetType(); ok {
		if err := recruitment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := ru.mutation.Content(); ok {
		if err := recruitment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (ru *RecruitmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recruitment.Table,
			Columns: recruitment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: recruitment.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitment.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldTitle,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: recruitment.FieldType,
		})
	}
	if value, ok := ru.mutation.Place(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldPlace,
		})
	}
	if ru.mutation.PlaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recruitment.FieldPlace,
		})
	}
	if value, ok := ru.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitment.FieldStartAt,
		})
	}
	if ru.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: recruitment.FieldStartAt,
		})
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldContent,
		})
	}
	if value, ok := ru.mutation.LocationURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldLocationURL,
		})
	}
	if ru.mutation.LocationURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recruitment.FieldLocationURL,
		})
	}
	if value, ok := ru.mutation.Capacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recruitment.FieldCapacity,
		})
	}
	if value, ok := ru.mutation.AddedCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recruitment.FieldCapacity,
		})
	}
	if value, ok := ru.mutation.ClosingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitment.FieldClosingAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recruitment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RecruitmentUpdateOne is the builder for updating a single Recruitment entity.
type RecruitmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecruitmentMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RecruitmentUpdateOne) SetUpdatedAt(t time.Time) *RecruitmentUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetTitle sets the "title" field.
func (ruo *RecruitmentUpdateOne) SetTitle(s string) *RecruitmentUpdateOne {
	ruo.mutation.SetTitle(s)
	return ruo
}

// SetType sets the "type" field.
func (ruo *RecruitmentUpdateOne) SetType(r recruitment.Type) *RecruitmentUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ruo *RecruitmentUpdateOne) SetNillableType(r *recruitment.Type) *RecruitmentUpdateOne {
	if r != nil {
		ruo.SetType(*r)
	}
	return ruo
}

// SetPlace sets the "place" field.
func (ruo *RecruitmentUpdateOne) SetPlace(s string) *RecruitmentUpdateOne {
	ruo.mutation.SetPlace(s)
	return ruo
}

// SetNillablePlace sets the "place" field if the given value is not nil.
func (ruo *RecruitmentUpdateOne) SetNillablePlace(s *string) *RecruitmentUpdateOne {
	if s != nil {
		ruo.SetPlace(*s)
	}
	return ruo
}

// ClearPlace clears the value of the "place" field.
func (ruo *RecruitmentUpdateOne) ClearPlace() *RecruitmentUpdateOne {
	ruo.mutation.ClearPlace()
	return ruo
}

// SetStartAt sets the "start_at" field.
func (ruo *RecruitmentUpdateOne) SetStartAt(t time.Time) *RecruitmentUpdateOne {
	ruo.mutation.SetStartAt(t)
	return ruo
}

// SetNillableStartAt sets the "start_at" field if the given value is not nil.
func (ruo *RecruitmentUpdateOne) SetNillableStartAt(t *time.Time) *RecruitmentUpdateOne {
	if t != nil {
		ruo.SetStartAt(*t)
	}
	return ruo
}

// ClearStartAt clears the value of the "start_at" field.
func (ruo *RecruitmentUpdateOne) ClearStartAt() *RecruitmentUpdateOne {
	ruo.mutation.ClearStartAt()
	return ruo
}

// SetContent sets the "content" field.
func (ruo *RecruitmentUpdateOne) SetContent(s string) *RecruitmentUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetLocationURL sets the "Location_url" field.
func (ruo *RecruitmentUpdateOne) SetLocationURL(s string) *RecruitmentUpdateOne {
	ruo.mutation.SetLocationURL(s)
	return ruo
}

// SetNillableLocationURL sets the "Location_url" field if the given value is not nil.
func (ruo *RecruitmentUpdateOne) SetNillableLocationURL(s *string) *RecruitmentUpdateOne {
	if s != nil {
		ruo.SetLocationURL(*s)
	}
	return ruo
}

// ClearLocationURL clears the value of the "Location_url" field.
func (ruo *RecruitmentUpdateOne) ClearLocationURL() *RecruitmentUpdateOne {
	ruo.mutation.ClearLocationURL()
	return ruo
}

// SetCapacity sets the "capacity" field.
func (ruo *RecruitmentUpdateOne) SetCapacity(i int) *RecruitmentUpdateOne {
	ruo.mutation.ResetCapacity()
	ruo.mutation.SetCapacity(i)
	return ruo
}

// AddCapacity adds i to the "capacity" field.
func (ruo *RecruitmentUpdateOne) AddCapacity(i int) *RecruitmentUpdateOne {
	ruo.mutation.AddCapacity(i)
	return ruo
}

// SetClosingAt sets the "closing_at" field.
func (ruo *RecruitmentUpdateOne) SetClosingAt(t time.Time) *RecruitmentUpdateOne {
	ruo.mutation.SetClosingAt(t)
	return ruo
}

// Mutation returns the RecruitmentMutation object of the builder.
func (ruo *RecruitmentUpdateOne) Mutation() *RecruitmentMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecruitmentUpdateOne) Select(field string, fields ...string) *RecruitmentUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Recruitment entity.
func (ruo *RecruitmentUpdateOne) Save(ctx context.Context) (*Recruitment, error) {
	var (
		err  error
		node *Recruitment
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecruitmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecruitmentUpdateOne) SaveX(ctx context.Context) *Recruitment {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecruitmentUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecruitmentUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecruitmentUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := recruitment.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RecruitmentUpdateOne) check() error {
	if v, ok := ruo.mutation.Title(); ok {
		if err := recruitment.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.GetType(); ok {
		if err := recruitment.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.Content(); ok {
		if err := recruitment.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	return nil
}

func (ruo *RecruitmentUpdateOne) sqlSave(ctx context.Context) (_node *Recruitment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recruitment.Table,
			Columns: recruitment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: recruitment.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Recruitment.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recruitment.FieldID)
		for _, f := range fields {
			if !recruitment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recruitment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitment.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldTitle,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: recruitment.FieldType,
		})
	}
	if value, ok := ruo.mutation.Place(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldPlace,
		})
	}
	if ruo.mutation.PlaceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recruitment.FieldPlace,
		})
	}
	if value, ok := ruo.mutation.StartAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitment.FieldStartAt,
		})
	}
	if ruo.mutation.StartAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: recruitment.FieldStartAt,
		})
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldContent,
		})
	}
	if value, ok := ruo.mutation.LocationURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recruitment.FieldLocationURL,
		})
	}
	if ruo.mutation.LocationURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: recruitment.FieldLocationURL,
		})
	}
	if value, ok := ruo.mutation.Capacity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recruitment.FieldCapacity,
		})
	}
	if value, ok := ruo.mutation.AddedCapacity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recruitment.FieldCapacity,
		})
	}
	if value, ok := ruo.mutation.ClosingAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitment.FieldClosingAt,
		})
	}
	_node = &Recruitment{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recruitment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
