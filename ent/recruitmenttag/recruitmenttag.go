// Code generated by entc, DO NOT EDIT.

package recruitmenttag

import (
	"time"
)

const (
	// Label holds the string label denoting the recruitmenttag type in the database.
	Label = "recruitment_tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRecruitmentID holds the string denoting the recruitment_id field in the database.
	FieldRecruitmentID = "recruitment_id"
	// FieldTagID holds the string denoting the tag_id field in the database.
	FieldTagID = "tag_id"
	// EdgeRecruitment holds the string denoting the recruitment edge name in mutations.
	EdgeRecruitment = "recruitment"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// Table holds the table name of the recruitmenttag in the database.
	Table = "recruitment_tags"
	// RecruitmentTable is the table that holds the recruitment relation/edge.
	RecruitmentTable = "recruitment_tags"
	// RecruitmentInverseTable is the table name for the Recruitment entity.
	// It exists in this package in order to avoid circular dependency with the "recruitment" package.
	RecruitmentInverseTable = "recruitments"
	// RecruitmentColumn is the table column denoting the recruitment relation/edge.
	RecruitmentColumn = "recruitment_id"
	// TagTable is the table that holds the tag relation/edge.
	TagTable = "recruitment_tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "tag_id"
)

// Columns holds all SQL columns for recruitmenttag fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRecruitmentID,
	FieldTagID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)
