// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nagokos/connefut_backend/ent/applicant"
	"github.com/nagokos/connefut_backend/ent/recruitment"
	"github.com/nagokos/connefut_backend/ent/user"
)

// ApplicantCreate is the builder for creating a Applicant entity.
type ApplicantCreate struct {
	config
	mutation *ApplicantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *ApplicantCreate) SetCreatedAt(t time.Time) *ApplicantCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ApplicantCreate) SetNillableCreatedAt(t *time.Time) *ApplicantCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ApplicantCreate) SetUpdatedAt(t time.Time) *ApplicantCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ApplicantCreate) SetNillableUpdatedAt(t *time.Time) *ApplicantCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetManagementStatus sets the "management_status" field.
func (ac *ApplicantCreate) SetManagementStatus(as applicant.ManagementStatus) *ApplicantCreate {
	ac.mutation.SetManagementStatus(as)
	return ac
}

// SetNillableManagementStatus sets the "management_status" field if the given value is not nil.
func (ac *ApplicantCreate) SetNillableManagementStatus(as *applicant.ManagementStatus) *ApplicantCreate {
	if as != nil {
		ac.SetManagementStatus(*as)
	}
	return ac
}

// SetUserID sets the "user_id" field.
func (ac *ApplicantCreate) SetUserID(s string) *ApplicantCreate {
	ac.mutation.SetUserID(s)
	return ac
}

// SetRecruitmentID sets the "recruitment_id" field.
func (ac *ApplicantCreate) SetRecruitmentID(s string) *ApplicantCreate {
	ac.mutation.SetRecruitmentID(s)
	return ac
}

// SetID sets the "id" field.
func (ac *ApplicantCreate) SetID(s string) *ApplicantCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *ApplicantCreate) SetNillableID(s *string) *ApplicantCreate {
	if s != nil {
		ac.SetID(*s)
	}
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *ApplicantCreate) SetUser(u *User) *ApplicantCreate {
	return ac.SetUserID(u.ID)
}

// SetRecruitment sets the "recruitment" edge to the Recruitment entity.
func (ac *ApplicantCreate) SetRecruitment(r *Recruitment) *ApplicantCreate {
	return ac.SetRecruitmentID(r.ID)
}

// Mutation returns the ApplicantMutation object of the builder.
func (ac *ApplicantCreate) Mutation() *ApplicantMutation {
	return ac.mutation
}

// Save creates the Applicant in the database.
func (ac *ApplicantCreate) Save(ctx context.Context) (*Applicant, error) {
	var (
		err  error
		node *Applicant
	)
	ac.defaults()
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ApplicantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ApplicantCreate) SaveX(ctx context.Context) *Applicant {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ApplicantCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ApplicantCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ApplicantCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := applicant.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := applicant.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.ManagementStatus(); !ok {
		v := applicant.DefaultManagementStatus
		ac.mutation.SetManagementStatus(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := applicant.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *ApplicantCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	if _, ok := ac.mutation.ManagementStatus(); !ok {
		return &ValidationError{Name: "management_status", err: errors.New(`ent: missing required field "management_status"`)}
	}
	if v, ok := ac.mutation.ManagementStatus(); ok {
		if err := applicant.ManagementStatusValidator(v); err != nil {
			return &ValidationError{Name: "management_status", err: fmt.Errorf(`ent: validator failed for field "management_status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := ac.mutation.RecruitmentID(); !ok {
		return &ValidationError{Name: "recruitment_id", err: errors.New(`ent: missing required field "recruitment_id"`)}
	}
	if v, ok := ac.mutation.ID(); ok {
		if err := applicant.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "id": %w`, err)}
		}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New("ent: missing required edge \"user\"")}
	}
	if _, ok := ac.mutation.RecruitmentID(); !ok {
		return &ValidationError{Name: "recruitment", err: errors.New("ent: missing required edge \"recruitment\"")}
	}
	return nil
}

func (ac *ApplicantCreate) sqlSave(ctx context.Context) (*Applicant, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(string)
	}
	return _node, nil
}

func (ac *ApplicantCreate) createSpec() (*Applicant, *sqlgraph.CreateSpec) {
	var (
		_node = &Applicant{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: applicant.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: applicant.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: applicant.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: applicant.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.ManagementStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: applicant.FieldManagementStatus,
		})
		_node.ManagementStatus = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicant.UserTable,
			Columns: []string{applicant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.RecruitmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   applicant.RecruitmentTable,
			Columns: []string{applicant.RecruitmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RecruitmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ApplicantCreateBulk is the builder for creating many Applicant entities in bulk.
type ApplicantCreateBulk struct {
	config
	builders []*ApplicantCreate
}

// Save creates the Applicant entities in the database.
func (acb *ApplicantCreateBulk) Save(ctx context.Context) ([]*Applicant, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Applicant, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApplicantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ApplicantCreateBulk) SaveX(ctx context.Context) []*Applicant {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ApplicantCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ApplicantCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
