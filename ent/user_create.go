// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nagokos/connefut_backend/ent/applicant"
	"github.com/nagokos/connefut_backend/ent/recruitment"
	"github.com/nagokos/connefut_backend/ent/stock"
	"github.com/nagokos/connefut_backend/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetRole sets the "role" field.
func (uc *UserCreate) SetRole(u user.Role) *UserCreate {
	uc.mutation.SetRole(u)
	return uc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uc *UserCreate) SetNillableRole(u *user.Role) *UserCreate {
	if u != nil {
		uc.SetRole(*u)
	}
	return uc
}

// SetAvatar sets the "avatar" field.
func (uc *UserCreate) SetAvatar(s string) *UserCreate {
	uc.mutation.SetAvatar(s)
	return uc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatar(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatar(*s)
	}
	return uc
}

// SetIntroduction sets the "introduction" field.
func (uc *UserCreate) SetIntroduction(s string) *UserCreate {
	uc.mutation.SetIntroduction(s)
	return uc
}

// SetNillableIntroduction sets the "introduction" field if the given value is not nil.
func (uc *UserCreate) SetNillableIntroduction(s *string) *UserCreate {
	if s != nil {
		uc.SetIntroduction(*s)
	}
	return uc
}

// SetEmailVerificationStatus sets the "email_verification_status" field.
func (uc *UserCreate) SetEmailVerificationStatus(uvs user.EmailVerificationStatus) *UserCreate {
	uc.mutation.SetEmailVerificationStatus(uvs)
	return uc
}

// SetNillableEmailVerificationStatus sets the "email_verification_status" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerificationStatus(uvs *user.EmailVerificationStatus) *UserCreate {
	if uvs != nil {
		uc.SetEmailVerificationStatus(*uvs)
	}
	return uc
}

// SetEmailVerificationToken sets the "email_verification_token" field.
func (uc *UserCreate) SetEmailVerificationToken(s string) *UserCreate {
	uc.mutation.SetEmailVerificationToken(s)
	return uc
}

// SetNillableEmailVerificationToken sets the "email_verification_token" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerificationToken(s *string) *UserCreate {
	if s != nil {
		uc.SetEmailVerificationToken(*s)
	}
	return uc
}

// SetEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field.
func (uc *UserCreate) SetEmailVerificationTokenExpiresAt(t time.Time) *UserCreate {
	uc.mutation.SetEmailVerificationTokenExpiresAt(t)
	return uc
}

// SetNillableEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmailVerificationTokenExpiresAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetEmailVerificationTokenExpiresAt(*t)
	}
	return uc
}

// SetPasswordDigest sets the "password_digest" field.
func (uc *UserCreate) SetPasswordDigest(s string) *UserCreate {
	uc.mutation.SetPasswordDigest(s)
	return uc
}

// SetNillablePasswordDigest sets the "password_digest" field if the given value is not nil.
func (uc *UserCreate) SetNillablePasswordDigest(s *string) *UserCreate {
	if s != nil {
		uc.SetPasswordDigest(*s)
	}
	return uc
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (uc *UserCreate) SetLastSignInAt(t time.Time) *UserCreate {
	uc.mutation.SetLastSignInAt(t)
	return uc
}

// SetNillableLastSignInAt sets the "last_sign_in_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableLastSignInAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLastSignInAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(s string) *UserCreate {
	uc.mutation.SetID(s)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(s *string) *UserCreate {
	if s != nil {
		uc.SetID(*s)
	}
	return uc
}

// AddRecruitmentIDs adds the "recruitments" edge to the Recruitment entity by IDs.
func (uc *UserCreate) AddRecruitmentIDs(ids ...string) *UserCreate {
	uc.mutation.AddRecruitmentIDs(ids...)
	return uc
}

// AddRecruitments adds the "recruitments" edges to the Recruitment entity.
func (uc *UserCreate) AddRecruitments(r ...*Recruitment) *UserCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddRecruitmentIDs(ids...)
}

// AddStockIDs adds the "stocks" edge to the Stock entity by IDs.
func (uc *UserCreate) AddStockIDs(ids ...string) *UserCreate {
	uc.mutation.AddStockIDs(ids...)
	return uc
}

// AddStocks adds the "stocks" edges to the Stock entity.
func (uc *UserCreate) AddStocks(s ...*Stock) *UserCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddStockIDs(ids...)
}

// AddApplicantIDs adds the "applicants" edge to the Applicant entity by IDs.
func (uc *UserCreate) AddApplicantIDs(ids ...string) *UserCreate {
	uc.mutation.AddApplicantIDs(ids...)
	return uc
}

// AddApplicants adds the "applicants" edges to the Applicant entity.
func (uc *UserCreate) AddApplicants(a ...*Applicant) *UserCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddApplicantIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Role(); !ok {
		v := user.DefaultRole
		uc.mutation.SetRole(v)
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		v := user.DefaultAvatar
		uc.mutation.SetAvatar(v)
	}
	if _, ok := uc.mutation.EmailVerificationStatus(); !ok {
		v := user.DefaultEmailVerificationStatus
		uc.mutation.SetEmailVerificationStatus(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := user.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "User.name": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "User.role"`)}
	}
	if v, ok := uc.mutation.Role(); ok {
		if err := user.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`ent: validator failed for field "User.role": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "User.avatar"`)}
	}
	if v, ok := uc.mutation.Introduction(); ok {
		if err := user.IntroductionValidator(v); err != nil {
			return &ValidationError{Name: "introduction", err: fmt.Errorf(`ent: validator failed for field "User.introduction": %w`, err)}
		}
	}
	if _, ok := uc.mutation.EmailVerificationStatus(); !ok {
		return &ValidationError{Name: "email_verification_status", err: errors.New(`ent: missing required field "User.email_verification_status"`)}
	}
	if v, ok := uc.mutation.EmailVerificationStatus(); ok {
		if err := user.EmailVerificationStatusValidator(v); err != nil {
			return &ValidationError{Name: "email_verification_status", err: fmt.Errorf(`ent: validator failed for field "User.email_verification_status": %w`, err)}
		}
	}
	if v, ok := uc.mutation.ID(); ok {
		if err := user.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "User.id": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected User.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		}
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
		_node.Name = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uc.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := uc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := uc.mutation.Introduction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldIntroduction,
		})
		_node.Introduction = value
	}
	if value, ok := uc.mutation.EmailVerificationStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldEmailVerificationStatus,
		})
		_node.EmailVerificationStatus = value
	}
	if value, ok := uc.mutation.EmailVerificationToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmailVerificationToken,
		})
		_node.EmailVerificationToken = value
	}
	if value, ok := uc.mutation.EmailVerificationTokenExpiresAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldEmailVerificationTokenExpiresAt,
		})
		_node.EmailVerificationTokenExpiresAt = value
	}
	if value, ok := uc.mutation.PasswordDigest(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPasswordDigest,
		})
		_node.PasswordDigest = value
	}
	if value, ok := uc.mutation.LastSignInAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldLastSignInAt,
		})
		_node.LastSignInAt = value
	}
	if nodes := uc.mutation.RecruitmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.RecruitmentsTable,
			Columns: []string{user.RecruitmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.StocksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StocksTable,
			Columns: []string{user.StocksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: stock.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ApplicantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApplicantsTable,
			Columns: []string{user.ApplicantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: applicant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflict(opts ...sql.ConflictOption) *UserUpsertOne {
	uc.conflict = opts
	return &UserUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (uc *UserCreate) OnConflictColumns(columns ...string) *UserUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertOne{
		create: uc,
	}
}

type (
	// UserUpsertOne is the builder for "upsert"-ing
	//  one User node.
	UserUpsertOne struct {
		create *UserCreate
	}

	// UserUpsert is the "OnConflict" setter.
	UserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsert) SetCreatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateCreatedAt() *UserUpsert {
	u.SetExcluded(user.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsert) SetUpdatedAt(v time.Time) *UserUpsert {
	u.Set(user.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateUpdatedAt() *UserUpsert {
	u.SetExcluded(user.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *UserUpsert) SetName(v string) *UserUpsert {
	u.Set(user.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsert) UpdateName() *UserUpsert {
	u.SetExcluded(user.FieldName)
	return u
}

// SetEmail sets the "email" field.
func (u *UserUpsert) SetEmail(v string) *UserUpsert {
	u.Set(user.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmail() *UserUpsert {
	u.SetExcluded(user.FieldEmail)
	return u
}

// SetRole sets the "role" field.
func (u *UserUpsert) SetRole(v user.Role) *UserUpsert {
	u.Set(user.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsert) UpdateRole() *UserUpsert {
	u.SetExcluded(user.FieldRole)
	return u
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsert) SetAvatar(v string) *UserUpsert {
	u.Set(user.FieldAvatar, v)
	return u
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsert) UpdateAvatar() *UserUpsert {
	u.SetExcluded(user.FieldAvatar)
	return u
}

// SetIntroduction sets the "introduction" field.
func (u *UserUpsert) SetIntroduction(v string) *UserUpsert {
	u.Set(user.FieldIntroduction, v)
	return u
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *UserUpsert) UpdateIntroduction() *UserUpsert {
	u.SetExcluded(user.FieldIntroduction)
	return u
}

// ClearIntroduction clears the value of the "introduction" field.
func (u *UserUpsert) ClearIntroduction() *UserUpsert {
	u.SetNull(user.FieldIntroduction)
	return u
}

// SetEmailVerificationStatus sets the "email_verification_status" field.
func (u *UserUpsert) SetEmailVerificationStatus(v user.EmailVerificationStatus) *UserUpsert {
	u.Set(user.FieldEmailVerificationStatus, v)
	return u
}

// UpdateEmailVerificationStatus sets the "email_verification_status" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailVerificationStatus() *UserUpsert {
	u.SetExcluded(user.FieldEmailVerificationStatus)
	return u
}

// SetEmailVerificationToken sets the "email_verification_token" field.
func (u *UserUpsert) SetEmailVerificationToken(v string) *UserUpsert {
	u.Set(user.FieldEmailVerificationToken, v)
	return u
}

// UpdateEmailVerificationToken sets the "email_verification_token" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailVerificationToken() *UserUpsert {
	u.SetExcluded(user.FieldEmailVerificationToken)
	return u
}

// ClearEmailVerificationToken clears the value of the "email_verification_token" field.
func (u *UserUpsert) ClearEmailVerificationToken() *UserUpsert {
	u.SetNull(user.FieldEmailVerificationToken)
	return u
}

// SetEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field.
func (u *UserUpsert) SetEmailVerificationTokenExpiresAt(v time.Time) *UserUpsert {
	u.Set(user.FieldEmailVerificationTokenExpiresAt, v)
	return u
}

// UpdateEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateEmailVerificationTokenExpiresAt() *UserUpsert {
	u.SetExcluded(user.FieldEmailVerificationTokenExpiresAt)
	return u
}

// ClearEmailVerificationTokenExpiresAt clears the value of the "email_verification_token_expires_at" field.
func (u *UserUpsert) ClearEmailVerificationTokenExpiresAt() *UserUpsert {
	u.SetNull(user.FieldEmailVerificationTokenExpiresAt)
	return u
}

// SetPasswordDigest sets the "password_digest" field.
func (u *UserUpsert) SetPasswordDigest(v string) *UserUpsert {
	u.Set(user.FieldPasswordDigest, v)
	return u
}

// UpdatePasswordDigest sets the "password_digest" field to the value that was provided on create.
func (u *UserUpsert) UpdatePasswordDigest() *UserUpsert {
	u.SetExcluded(user.FieldPasswordDigest)
	return u
}

// ClearPasswordDigest clears the value of the "password_digest" field.
func (u *UserUpsert) ClearPasswordDigest() *UserUpsert {
	u.SetNull(user.FieldPasswordDigest)
	return u
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (u *UserUpsert) SetLastSignInAt(v time.Time) *UserUpsert {
	u.Set(user.FieldLastSignInAt, v)
	return u
}

// UpdateLastSignInAt sets the "last_sign_in_at" field to the value that was provided on create.
func (u *UserUpsert) UpdateLastSignInAt() *UserUpsert {
	u.SetExcluded(user.FieldLastSignInAt)
	return u
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (u *UserUpsert) ClearLastSignInAt() *UserUpsert {
	u.SetNull(user.FieldLastSignInAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserUpsertOne) UpdateNewValues() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(user.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(user.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.User.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *UserUpsertOne) Ignore() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertOne) DoNothing() *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreate.OnConflict
// documentation for more info.
func (u *UserUpsertOne) Update(set func(*UserUpsert)) *UserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertOne) SetCreatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateCreatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertOne) SetUpdatedAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateUpdatedAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertOne) SetName(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateName() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertOne) SetEmail(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmail() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertOne) SetRole(v user.Role) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateRole() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertOne) SetAvatar(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateAvatar() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// SetIntroduction sets the "introduction" field.
func (u *UserUpsertOne) SetIntroduction(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetIntroduction(v)
	})
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateIntroduction() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIntroduction()
	})
}

// ClearIntroduction clears the value of the "introduction" field.
func (u *UserUpsertOne) ClearIntroduction() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearIntroduction()
	})
}

// SetEmailVerificationStatus sets the "email_verification_status" field.
func (u *UserUpsertOne) SetEmailVerificationStatus(v user.EmailVerificationStatus) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerificationStatus(v)
	})
}

// UpdateEmailVerificationStatus sets the "email_verification_status" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailVerificationStatus() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerificationStatus()
	})
}

// SetEmailVerificationToken sets the "email_verification_token" field.
func (u *UserUpsertOne) SetEmailVerificationToken(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerificationToken(v)
	})
}

// UpdateEmailVerificationToken sets the "email_verification_token" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailVerificationToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerificationToken()
	})
}

// ClearEmailVerificationToken clears the value of the "email_verification_token" field.
func (u *UserUpsertOne) ClearEmailVerificationToken() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailVerificationToken()
	})
}

// SetEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field.
func (u *UserUpsertOne) SetEmailVerificationTokenExpiresAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerificationTokenExpiresAt(v)
	})
}

// UpdateEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateEmailVerificationTokenExpiresAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerificationTokenExpiresAt()
	})
}

// ClearEmailVerificationTokenExpiresAt clears the value of the "email_verification_token_expires_at" field.
func (u *UserUpsertOne) ClearEmailVerificationTokenExpiresAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailVerificationTokenExpiresAt()
	})
}

// SetPasswordDigest sets the "password_digest" field.
func (u *UserUpsertOne) SetPasswordDigest(v string) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordDigest(v)
	})
}

// UpdatePasswordDigest sets the "password_digest" field to the value that was provided on create.
func (u *UserUpsertOne) UpdatePasswordDigest() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordDigest()
	})
}

// ClearPasswordDigest clears the value of the "password_digest" field.
func (u *UserUpsertOne) ClearPasswordDigest() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordDigest()
	})
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (u *UserUpsertOne) SetLastSignInAt(v time.Time) *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.SetLastSignInAt(v)
	})
}

// UpdateLastSignInAt sets the "last_sign_in_at" field to the value that was provided on create.
func (u *UserUpsertOne) UpdateLastSignInAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastSignInAt()
	})
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (u *UserUpsertOne) ClearLastSignInAt() *UserUpsertOne {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastSignInAt()
	})
}

// Exec executes the query.
func (u *UserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UserUpsertOne.ID is not supported by MySQL driver. Use UserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
	conflict []sql.ConflictOption
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.User.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflict(opts ...sql.ConflictOption) *UserUpsertBulk {
	ucb.conflict = opts
	return &UserUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ucb *UserCreateBulk) OnConflictColumns(columns ...string) *UserUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UserUpsertBulk{
		create: ucb,
	}
}

// UserUpsertBulk is the builder for "upsert"-ing
// a bulk of User nodes.
type UserUpsertBulk struct {
	create *UserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(user.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *UserUpsertBulk) UpdateNewValues() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(user.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(user.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.User.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *UserUpsertBulk) Ignore() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UserUpsertBulk) DoNothing() *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UserCreateBulk.OnConflict
// documentation for more info.
func (u *UserUpsertBulk) Update(set func(*UserUpsert)) *UserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UserUpsertBulk) SetCreatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateCreatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UserUpsertBulk) SetUpdatedAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateUpdatedAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *UserUpsertBulk) SetName(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateName() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateName()
	})
}

// SetEmail sets the "email" field.
func (u *UserUpsertBulk) SetEmail(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmail() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmail()
	})
}

// SetRole sets the "role" field.
func (u *UserUpsertBulk) SetRole(v user.Role) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateRole() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateRole()
	})
}

// SetAvatar sets the "avatar" field.
func (u *UserUpsertBulk) SetAvatar(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetAvatar(v)
	})
}

// UpdateAvatar sets the "avatar" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateAvatar() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateAvatar()
	})
}

// SetIntroduction sets the "introduction" field.
func (u *UserUpsertBulk) SetIntroduction(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetIntroduction(v)
	})
}

// UpdateIntroduction sets the "introduction" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateIntroduction() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateIntroduction()
	})
}

// ClearIntroduction clears the value of the "introduction" field.
func (u *UserUpsertBulk) ClearIntroduction() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearIntroduction()
	})
}

// SetEmailVerificationStatus sets the "email_verification_status" field.
func (u *UserUpsertBulk) SetEmailVerificationStatus(v user.EmailVerificationStatus) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerificationStatus(v)
	})
}

// UpdateEmailVerificationStatus sets the "email_verification_status" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailVerificationStatus() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerificationStatus()
	})
}

// SetEmailVerificationToken sets the "email_verification_token" field.
func (u *UserUpsertBulk) SetEmailVerificationToken(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerificationToken(v)
	})
}

// UpdateEmailVerificationToken sets the "email_verification_token" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailVerificationToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerificationToken()
	})
}

// ClearEmailVerificationToken clears the value of the "email_verification_token" field.
func (u *UserUpsertBulk) ClearEmailVerificationToken() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailVerificationToken()
	})
}

// SetEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field.
func (u *UserUpsertBulk) SetEmailVerificationTokenExpiresAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetEmailVerificationTokenExpiresAt(v)
	})
}

// UpdateEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateEmailVerificationTokenExpiresAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateEmailVerificationTokenExpiresAt()
	})
}

// ClearEmailVerificationTokenExpiresAt clears the value of the "email_verification_token_expires_at" field.
func (u *UserUpsertBulk) ClearEmailVerificationTokenExpiresAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearEmailVerificationTokenExpiresAt()
	})
}

// SetPasswordDigest sets the "password_digest" field.
func (u *UserUpsertBulk) SetPasswordDigest(v string) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetPasswordDigest(v)
	})
}

// UpdatePasswordDigest sets the "password_digest" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdatePasswordDigest() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdatePasswordDigest()
	})
}

// ClearPasswordDigest clears the value of the "password_digest" field.
func (u *UserUpsertBulk) ClearPasswordDigest() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearPasswordDigest()
	})
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (u *UserUpsertBulk) SetLastSignInAt(v time.Time) *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.SetLastSignInAt(v)
	})
}

// UpdateLastSignInAt sets the "last_sign_in_at" field to the value that was provided on create.
func (u *UserUpsertBulk) UpdateLastSignInAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.UpdateLastSignInAt()
	})
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (u *UserUpsertBulk) ClearLastSignInAt() *UserUpsertBulk {
	return u.Update(func(s *UserUpsert) {
		s.ClearLastSignInAt()
	})
}

// Exec executes the query.
func (u *UserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
