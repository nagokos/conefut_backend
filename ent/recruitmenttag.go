// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nagokos/connefut_backend/ent/recruitment"
	"github.com/nagokos/connefut_backend/ent/recruitmenttag"
	"github.com/nagokos/connefut_backend/ent/tag"
)

// RecruitmentTag is the model entity for the RecruitmentTag schema.
type RecruitmentTag struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// RecruitmentID holds the value of the "recruitment_id" field.
	RecruitmentID string `json:"recruitment_id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID string `json:"tag_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecruitmentTagQuery when eager-loading is set.
	Edges RecruitmentTagEdges `json:"edges"`
}

// RecruitmentTagEdges holds the relations/edges for other nodes in the graph.
type RecruitmentTagEdges struct {
	// Recruitment holds the value of the recruitment edge.
	Recruitment *Recruitment `json:"recruitment,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RecruitmentOrErr returns the Recruitment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecruitmentTagEdges) RecruitmentOrErr() (*Recruitment, error) {
	if e.loadedTypes[0] {
		if e.Recruitment == nil {
			// The edge recruitment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: recruitment.Label}
		}
		return e.Recruitment, nil
	}
	return nil, &NotLoadedError{edge: "recruitment"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecruitmentTagEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[1] {
		if e.Tag == nil {
			// The edge tag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RecruitmentTag) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case recruitmenttag.FieldID, recruitmenttag.FieldRecruitmentID, recruitmenttag.FieldTagID:
			values[i] = new(sql.NullString)
		case recruitmenttag.FieldCreatedAt, recruitmenttag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RecruitmentTag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RecruitmentTag fields.
func (rt *RecruitmentTag) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recruitmenttag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rt.ID = value.String
			}
		case recruitmenttag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rt.CreatedAt = value.Time
			}
		case recruitmenttag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rt.UpdatedAt = value.Time
			}
		case recruitmenttag.FieldRecruitmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field recruitment_id", values[i])
			} else if value.Valid {
				rt.RecruitmentID = value.String
			}
		case recruitmenttag.FieldTagID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				rt.TagID = value.String
			}
		}
	}
	return nil
}

// QueryRecruitment queries the "recruitment" edge of the RecruitmentTag entity.
func (rt *RecruitmentTag) QueryRecruitment() *RecruitmentQuery {
	return (&RecruitmentTagClient{config: rt.config}).QueryRecruitment(rt)
}

// QueryTag queries the "tag" edge of the RecruitmentTag entity.
func (rt *RecruitmentTag) QueryTag() *TagQuery {
	return (&RecruitmentTagClient{config: rt.config}).QueryTag(rt)
}

// Update returns a builder for updating this RecruitmentTag.
// Note that you need to call RecruitmentTag.Unwrap() before calling this method if this RecruitmentTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *RecruitmentTag) Update() *RecruitmentTagUpdateOne {
	return (&RecruitmentTagClient{config: rt.config}).UpdateOne(rt)
}

// Unwrap unwraps the RecruitmentTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *RecruitmentTag) Unwrap() *RecruitmentTag {
	tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RecruitmentTag is not a transactional entity")
	}
	rt.config.driver = tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *RecruitmentTag) String() string {
	var builder strings.Builder
	builder.WriteString("RecruitmentTag(")
	builder.WriteString(fmt.Sprintf("id=%v", rt.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(rt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(rt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", recruitment_id=")
	builder.WriteString(rt.RecruitmentID)
	builder.WriteString(", tag_id=")
	builder.WriteString(rt.TagID)
	builder.WriteByte(')')
	return builder.String()
}

// RecruitmentTags is a parsable slice of RecruitmentTag.
type RecruitmentTags []*RecruitmentTag

func (rt RecruitmentTags) config(cfg config) {
	for _i := range rt {
		rt[_i].config = cfg
	}
}
