// Code generated by entc, DO NOT EDIT.

package recruitment

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

const (
	// Label holds the string label denoting the recruitment type in the database.
	Label = "recruitment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldPlace holds the string denoting the place field in the database.
	FieldPlace = "place"
	// FieldStartAt holds the string denoting the start_at field in the database.
	FieldStartAt = "start_at"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldLocationLat holds the string denoting the locationlat field in the database.
	FieldLocationLat = "location_lat"
	// FieldLocationLng holds the string denoting the locationlng field in the database.
	FieldLocationLng = "location_lng"
	// FieldCapacity holds the string denoting the capacity field in the database.
	FieldCapacity = "capacity"
	// FieldClosingAt holds the string denoting the closing_at field in the database.
	FieldClosingAt = "closing_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgePrefecture holds the string denoting the prefecture edge name in mutations.
	EdgePrefecture = "prefecture"
	// EdgeCompetition holds the string denoting the competition edge name in mutations.
	EdgeCompetition = "competition"
	// Table holds the table name of the recruitment in the database.
	Table = "recruitments"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "recruitments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// PrefectureTable is the table that holds the prefecture relation/edge.
	PrefectureTable = "recruitments"
	// PrefectureInverseTable is the table name for the Prefecture entity.
	// It exists in this package in order to avoid circular dependency with the "prefecture" package.
	PrefectureInverseTable = "prefectures"
	// PrefectureColumn is the table column denoting the prefecture relation/edge.
	PrefectureColumn = "prefecture_id"
	// CompetitionTable is the table that holds the competition relation/edge.
	CompetitionTable = "recruitments"
	// CompetitionInverseTable is the table name for the Competition entity.
	// It exists in this package in order to avoid circular dependency with the "competition" package.
	CompetitionInverseTable = "competitions"
	// CompetitionColumn is the table column denoting the competition relation/edge.
	CompetitionColumn = "competition_id"
)

// Columns holds all SQL columns for recruitment fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldTitle,
	FieldType,
	FieldLevel,
	FieldPlace,
	FieldStartAt,
	FieldContent,
	FieldLocationLat,
	FieldLocationLng,
	FieldCapacity,
	FieldClosingAt,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "recruitments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"competition_id",
	"prefecture_id",
	"user_id",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// TypeUnnecessary is the default value of the Type enum.
const DefaultType = TypeUnnecessary

// Type values.
const (
	TypeUnnecessary Type = "unnecessary"
	TypeOpponent    Type = "opponent"
	TypeIndividual  Type = "individual"
	TypeTeammate    Type = "teammate"
	TypeJoining     Type = "joining"
	TypeCoaching    Type = "coaching"
	TypeOthers      Type = "others"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeUnnecessary, TypeOpponent, TypeIndividual, TypeTeammate, TypeJoining, TypeCoaching, TypeOthers:
		return nil
	default:
		return fmt.Errorf("recruitment: invalid enum value for type field: %q", _type)
	}
}

// Level defines the type for the "level" enum field.
type Level string

// LevelUnnecessary is the default value of the Level enum.
const DefaultLevel = LevelUnnecessary

// Level values.
const (
	LevelUnnecessary Level = "unnecessary"
	LevelEnjoy       Level = "enjoy"
	LevelBeginner    Level = "beginner"
	LevelMiddle      Level = "middle"
	LevelExpert      Level = "expert"
	LevelOpen        Level = "open"
)

func (l Level) String() string {
	return string(l)
}

// LevelValidator is a validator for the "level" field enum values. It is called by the builders before save.
func LevelValidator(l Level) error {
	switch l {
	case LevelUnnecessary, LevelEnjoy, LevelBeginner, LevelMiddle, LevelExpert, LevelOpen:
		return nil
	default:
		return fmt.Errorf("recruitment: invalid enum value for level field: %q", l)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusDraft is the default value of the Status enum.
const DefaultStatus = StatusDraft

// Status values.
const (
	StatusDraft     Status = "draft"
	StatusPublished Status = "published"
	StatusClosed    Status = "closed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusDraft, StatusPublished, StatusClosed:
		return nil
	default:
		return fmt.Errorf("recruitment: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (_type Type) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(_type.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (_type *Type) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*_type = Type(str)
	if err := TypeValidator(*_type); err != nil {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (l Level) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(l.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (l *Level) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*l = Level(str)
	if err := LevelValidator(*l); err != nil {
		return fmt.Errorf("%s is not a valid Level", str)
	}
	return nil
}

// MarshalGQL implements graphql.Marshaler interface.
func (s Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(s.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (s *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*s = Status(str)
	if err := StatusValidator(*s); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
