// Code generated by entc, DO NOT EDIT.

package recruitment

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/nagokos/connefut_backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Place applies equality check predicate on the "place" field. It's identical to PlaceEQ.
func Place(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlace), v))
	})
}

// StartAt applies equality check predicate on the "start_at" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// LocationLat applies equality check predicate on the "locationLat" field. It's identical to LocationLatEQ.
func LocationLat(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationLat), v))
	})
}

// LocationLng applies equality check predicate on the "locationLng" field. It's identical to LocationLngEQ.
func LocationLng(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationLng), v))
	})
}

// Capacity applies equality check predicate on the "capacity" field. It's identical to CapacityEQ.
func Capacity(v int) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCapacity), v))
	})
}

// ClosingAt applies equality check predicate on the "closing_at" field. It's identical to ClosingAtEQ.
func ClosingAt(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosingAt), v))
	})
}

// IsPublished applies equality check predicate on the "is_published" field. It's identical to IsPublishedEQ.
func IsPublished(v bool) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPublished), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v Level) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v Level) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...Level) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...Level) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelIsNil applies the IsNil predicate on the "level" field.
func LevelIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLevel)))
	})
}

// LevelNotNil applies the NotNil predicate on the "level" field.
func LevelNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLevel)))
	})
}

// PlaceEQ applies the EQ predicate on the "place" field.
func PlaceEQ(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPlace), v))
	})
}

// PlaceNEQ applies the NEQ predicate on the "place" field.
func PlaceNEQ(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPlace), v))
	})
}

// PlaceIn applies the In predicate on the "place" field.
func PlaceIn(vs ...string) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPlace), v...))
	})
}

// PlaceNotIn applies the NotIn predicate on the "place" field.
func PlaceNotIn(vs ...string) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPlace), v...))
	})
}

// PlaceGT applies the GT predicate on the "place" field.
func PlaceGT(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPlace), v))
	})
}

// PlaceGTE applies the GTE predicate on the "place" field.
func PlaceGTE(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPlace), v))
	})
}

// PlaceLT applies the LT predicate on the "place" field.
func PlaceLT(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPlace), v))
	})
}

// PlaceLTE applies the LTE predicate on the "place" field.
func PlaceLTE(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPlace), v))
	})
}

// PlaceContains applies the Contains predicate on the "place" field.
func PlaceContains(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPlace), v))
	})
}

// PlaceHasPrefix applies the HasPrefix predicate on the "place" field.
func PlaceHasPrefix(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPlace), v))
	})
}

// PlaceHasSuffix applies the HasSuffix predicate on the "place" field.
func PlaceHasSuffix(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPlace), v))
	})
}

// PlaceIsNil applies the IsNil predicate on the "place" field.
func PlaceIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPlace)))
	})
}

// PlaceNotNil applies the NotNil predicate on the "place" field.
func PlaceNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPlace)))
	})
}

// PlaceEqualFold applies the EqualFold predicate on the "place" field.
func PlaceEqualFold(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPlace), v))
	})
}

// PlaceContainsFold applies the ContainsFold predicate on the "place" field.
func PlaceContainsFold(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPlace), v))
	})
}

// StartAtEQ applies the EQ predicate on the "start_at" field.
func StartAtEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "start_at" field.
func StartAtNEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "start_at" field.
func StartAtIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "start_at" field.
func StartAtNotIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "start_at" field.
func StartAtGT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "start_at" field.
func StartAtGTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "start_at" field.
func StartAtLT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "start_at" field.
func StartAtLTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StartAtIsNil applies the IsNil predicate on the "start_at" field.
func StartAtIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartAt)))
	})
}

// StartAtNotNil applies the NotNil predicate on the "start_at" field.
func StartAtNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartAt)))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContent)))
	})
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContent)))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// LocationLatEQ applies the EQ predicate on the "locationLat" field.
func LocationLatEQ(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationLat), v))
	})
}

// LocationLatNEQ applies the NEQ predicate on the "locationLat" field.
func LocationLatNEQ(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocationLat), v))
	})
}

// LocationLatIn applies the In predicate on the "locationLat" field.
func LocationLatIn(vs ...float64) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocationLat), v...))
	})
}

// LocationLatNotIn applies the NotIn predicate on the "locationLat" field.
func LocationLatNotIn(vs ...float64) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocationLat), v...))
	})
}

// LocationLatGT applies the GT predicate on the "locationLat" field.
func LocationLatGT(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocationLat), v))
	})
}

// LocationLatGTE applies the GTE predicate on the "locationLat" field.
func LocationLatGTE(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocationLat), v))
	})
}

// LocationLatLT applies the LT predicate on the "locationLat" field.
func LocationLatLT(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocationLat), v))
	})
}

// LocationLatLTE applies the LTE predicate on the "locationLat" field.
func LocationLatLTE(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocationLat), v))
	})
}

// LocationLatIsNil applies the IsNil predicate on the "locationLat" field.
func LocationLatIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocationLat)))
	})
}

// LocationLatNotNil applies the NotNil predicate on the "locationLat" field.
func LocationLatNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocationLat)))
	})
}

// LocationLngEQ applies the EQ predicate on the "locationLng" field.
func LocationLngEQ(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocationLng), v))
	})
}

// LocationLngNEQ applies the NEQ predicate on the "locationLng" field.
func LocationLngNEQ(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocationLng), v))
	})
}

// LocationLngIn applies the In predicate on the "locationLng" field.
func LocationLngIn(vs ...float64) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocationLng), v...))
	})
}

// LocationLngNotIn applies the NotIn predicate on the "locationLng" field.
func LocationLngNotIn(vs ...float64) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocationLng), v...))
	})
}

// LocationLngGT applies the GT predicate on the "locationLng" field.
func LocationLngGT(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocationLng), v))
	})
}

// LocationLngGTE applies the GTE predicate on the "locationLng" field.
func LocationLngGTE(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocationLng), v))
	})
}

// LocationLngLT applies the LT predicate on the "locationLng" field.
func LocationLngLT(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocationLng), v))
	})
}

// LocationLngLTE applies the LTE predicate on the "locationLng" field.
func LocationLngLTE(v float64) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocationLng), v))
	})
}

// LocationLngIsNil applies the IsNil predicate on the "locationLng" field.
func LocationLngIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLocationLng)))
	})
}

// LocationLngNotNil applies the NotNil predicate on the "locationLng" field.
func LocationLngNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLocationLng)))
	})
}

// CapacityEQ applies the EQ predicate on the "capacity" field.
func CapacityEQ(v int) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCapacity), v))
	})
}

// CapacityNEQ applies the NEQ predicate on the "capacity" field.
func CapacityNEQ(v int) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCapacity), v))
	})
}

// CapacityIn applies the In predicate on the "capacity" field.
func CapacityIn(vs ...int) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCapacity), v...))
	})
}

// CapacityNotIn applies the NotIn predicate on the "capacity" field.
func CapacityNotIn(vs ...int) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCapacity), v...))
	})
}

// CapacityGT applies the GT predicate on the "capacity" field.
func CapacityGT(v int) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCapacity), v))
	})
}

// CapacityGTE applies the GTE predicate on the "capacity" field.
func CapacityGTE(v int) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCapacity), v))
	})
}

// CapacityLT applies the LT predicate on the "capacity" field.
func CapacityLT(v int) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCapacity), v))
	})
}

// CapacityLTE applies the LTE predicate on the "capacity" field.
func CapacityLTE(v int) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCapacity), v))
	})
}

// CapacityIsNil applies the IsNil predicate on the "capacity" field.
func CapacityIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCapacity)))
	})
}

// CapacityNotNil applies the NotNil predicate on the "capacity" field.
func CapacityNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCapacity)))
	})
}

// ClosingAtEQ applies the EQ predicate on the "closing_at" field.
func ClosingAtEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClosingAt), v))
	})
}

// ClosingAtNEQ applies the NEQ predicate on the "closing_at" field.
func ClosingAtNEQ(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClosingAt), v))
	})
}

// ClosingAtIn applies the In predicate on the "closing_at" field.
func ClosingAtIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClosingAt), v...))
	})
}

// ClosingAtNotIn applies the NotIn predicate on the "closing_at" field.
func ClosingAtNotIn(vs ...time.Time) predicate.Recruitment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Recruitment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClosingAt), v...))
	})
}

// ClosingAtGT applies the GT predicate on the "closing_at" field.
func ClosingAtGT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClosingAt), v))
	})
}

// ClosingAtGTE applies the GTE predicate on the "closing_at" field.
func ClosingAtGTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClosingAt), v))
	})
}

// ClosingAtLT applies the LT predicate on the "closing_at" field.
func ClosingAtLT(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClosingAt), v))
	})
}

// ClosingAtLTE applies the LTE predicate on the "closing_at" field.
func ClosingAtLTE(v time.Time) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClosingAt), v))
	})
}

// ClosingAtIsNil applies the IsNil predicate on the "closing_at" field.
func ClosingAtIsNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldClosingAt)))
	})
}

// ClosingAtNotNil applies the NotNil predicate on the "closing_at" field.
func ClosingAtNotNil() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldClosingAt)))
	})
}

// IsPublishedEQ applies the EQ predicate on the "is_published" field.
func IsPublishedEQ(v bool) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPublished), v))
	})
}

// IsPublishedNEQ applies the NEQ predicate on the "is_published" field.
func IsPublishedNEQ(v bool) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPublished), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrefecture applies the HasEdge predicate on the "prefecture" edge.
func HasPrefecture() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrefectureTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrefectureTable, PrefectureColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPrefectureWith applies the HasEdge predicate on the "prefecture" edge with a given conditions (other predicates).
func HasPrefectureWith(preds ...predicate.Prefecture) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PrefectureInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PrefectureTable, PrefectureColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCompetition applies the HasEdge predicate on the "competition" edge.
func HasCompetition() predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompetitionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCompetitionWith applies the HasEdge predicate on the "competition" edge with a given conditions (other predicates).
func HasCompetitionWith(preds ...predicate.Competition) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CompetitionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CompetitionTable, CompetitionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Recruitment) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Recruitment) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Recruitment) predicate.Recruitment {
	return predicate.Recruitment(func(s *sql.Selector) {
		p(s.Not())
	})
}
