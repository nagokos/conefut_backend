// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/nagokos/connefut_backend/ent/competition"
	"github.com/nagokos/connefut_backend/ent/predicate"
	"github.com/nagokos/connefut_backend/ent/prefecture"
	"github.com/nagokos/connefut_backend/ent/recruitment"
	"github.com/nagokos/connefut_backend/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCompetition = "Competition"
	TypePrefecture  = "Prefecture"
	TypeRecruitment = "Recruitment"
	TypeUser        = "User"
)

// CompetitionMutation represents an operation that mutates the Competition nodes in the graph.
type CompetitionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	created_at          *time.Time
	updated_at          *time.Time
	name                *string
	clearedFields       map[string]struct{}
	recruitments        map[string]struct{}
	removedrecruitments map[string]struct{}
	clearedrecruitments bool
	done                bool
	oldValue            func(context.Context) (*Competition, error)
	predicates          []predicate.Competition
}

var _ ent.Mutation = (*CompetitionMutation)(nil)

// competitionOption allows management of the mutation configuration using functional options.
type competitionOption func(*CompetitionMutation)

// newCompetitionMutation creates new mutation for the Competition entity.
func newCompetitionMutation(c config, op Op, opts ...competitionOption) *CompetitionMutation {
	m := &CompetitionMutation{
		config:        c,
		op:            op,
		typ:           TypeCompetition,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCompetitionID sets the ID field of the mutation.
func withCompetitionID(id string) competitionOption {
	return func(m *CompetitionMutation) {
		var (
			err   error
			once  sync.Once
			value *Competition
		)
		m.oldValue = func(ctx context.Context) (*Competition, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Competition.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCompetition sets the old Competition of the mutation.
func withCompetition(node *Competition) competitionOption {
	return func(m *CompetitionMutation) {
		m.oldValue = func(context.Context) (*Competition, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CompetitionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CompetitionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Competition entities.
func (m *CompetitionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CompetitionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *CompetitionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CompetitionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Competition entity.
// If the Competition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompetitionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CompetitionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CompetitionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CompetitionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Competition entity.
// If the Competition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompetitionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CompetitionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *CompetitionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CompetitionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Competition entity.
// If the Competition object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CompetitionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CompetitionMutation) ResetName() {
	m.name = nil
}

// AddRecruitmentIDs adds the "recruitments" edge to the Recruitment entity by ids.
func (m *CompetitionMutation) AddRecruitmentIDs(ids ...string) {
	if m.recruitments == nil {
		m.recruitments = make(map[string]struct{})
	}
	for i := range ids {
		m.recruitments[ids[i]] = struct{}{}
	}
}

// ClearRecruitments clears the "recruitments" edge to the Recruitment entity.
func (m *CompetitionMutation) ClearRecruitments() {
	m.clearedrecruitments = true
}

// RecruitmentsCleared reports if the "recruitments" edge to the Recruitment entity was cleared.
func (m *CompetitionMutation) RecruitmentsCleared() bool {
	return m.clearedrecruitments
}

// RemoveRecruitmentIDs removes the "recruitments" edge to the Recruitment entity by IDs.
func (m *CompetitionMutation) RemoveRecruitmentIDs(ids ...string) {
	if m.removedrecruitments == nil {
		m.removedrecruitments = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.recruitments, ids[i])
		m.removedrecruitments[ids[i]] = struct{}{}
	}
}

// RemovedRecruitments returns the removed IDs of the "recruitments" edge to the Recruitment entity.
func (m *CompetitionMutation) RemovedRecruitmentsIDs() (ids []string) {
	for id := range m.removedrecruitments {
		ids = append(ids, id)
	}
	return
}

// RecruitmentsIDs returns the "recruitments" edge IDs in the mutation.
func (m *CompetitionMutation) RecruitmentsIDs() (ids []string) {
	for id := range m.recruitments {
		ids = append(ids, id)
	}
	return
}

// ResetRecruitments resets all changes to the "recruitments" edge.
func (m *CompetitionMutation) ResetRecruitments() {
	m.recruitments = nil
	m.clearedrecruitments = false
	m.removedrecruitments = nil
}

// Where appends a list predicates to the CompetitionMutation builder.
func (m *CompetitionMutation) Where(ps ...predicate.Competition) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CompetitionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Competition).
func (m *CompetitionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CompetitionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, competition.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, competition.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, competition.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CompetitionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case competition.FieldCreatedAt:
		return m.CreatedAt()
	case competition.FieldUpdatedAt:
		return m.UpdatedAt()
	case competition.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CompetitionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case competition.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case competition.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case competition.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Competition field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompetitionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case competition.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case competition.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case competition.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Competition field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CompetitionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CompetitionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CompetitionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Competition numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CompetitionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CompetitionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CompetitionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Competition nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CompetitionMutation) ResetField(name string) error {
	switch name {
	case competition.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case competition.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case competition.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Competition field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CompetitionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recruitments != nil {
		edges = append(edges, competition.EdgeRecruitments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CompetitionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case competition.EdgeRecruitments:
		ids := make([]ent.Value, 0, len(m.recruitments))
		for id := range m.recruitments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CompetitionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecruitments != nil {
		edges = append(edges, competition.EdgeRecruitments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CompetitionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case competition.EdgeRecruitments:
		ids := make([]ent.Value, 0, len(m.removedrecruitments))
		for id := range m.removedrecruitments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CompetitionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecruitments {
		edges = append(edges, competition.EdgeRecruitments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CompetitionMutation) EdgeCleared(name string) bool {
	switch name {
	case competition.EdgeRecruitments:
		return m.clearedrecruitments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CompetitionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Competition unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CompetitionMutation) ResetEdge(name string) error {
	switch name {
	case competition.EdgeRecruitments:
		m.ResetRecruitments()
		return nil
	}
	return fmt.Errorf("unknown Competition edge %s", name)
}

// PrefectureMutation represents an operation that mutates the Prefecture nodes in the graph.
type PrefectureMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	created_at          *time.Time
	updated_at          *time.Time
	name                *string
	clearedFields       map[string]struct{}
	recruitments        map[string]struct{}
	removedrecruitments map[string]struct{}
	clearedrecruitments bool
	done                bool
	oldValue            func(context.Context) (*Prefecture, error)
	predicates          []predicate.Prefecture
}

var _ ent.Mutation = (*PrefectureMutation)(nil)

// prefectureOption allows management of the mutation configuration using functional options.
type prefectureOption func(*PrefectureMutation)

// newPrefectureMutation creates new mutation for the Prefecture entity.
func newPrefectureMutation(c config, op Op, opts ...prefectureOption) *PrefectureMutation {
	m := &PrefectureMutation{
		config:        c,
		op:            op,
		typ:           TypePrefecture,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPrefectureID sets the ID field of the mutation.
func withPrefectureID(id string) prefectureOption {
	return func(m *PrefectureMutation) {
		var (
			err   error
			once  sync.Once
			value *Prefecture
		)
		m.oldValue = func(ctx context.Context) (*Prefecture, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Prefecture.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPrefecture sets the old Prefecture of the mutation.
func withPrefecture(node *Prefecture) prefectureOption {
	return func(m *PrefectureMutation) {
		m.oldValue = func(context.Context) (*Prefecture, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PrefectureMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PrefectureMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Prefecture entities.
func (m *PrefectureMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PrefectureMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *PrefectureMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PrefectureMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Prefecture entity.
// If the Prefecture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrefectureMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PrefectureMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PrefectureMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PrefectureMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Prefecture entity.
// If the Prefecture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrefectureMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PrefectureMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *PrefectureMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PrefectureMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Prefecture entity.
// If the Prefecture object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PrefectureMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PrefectureMutation) ResetName() {
	m.name = nil
}

// AddRecruitmentIDs adds the "recruitments" edge to the Recruitment entity by ids.
func (m *PrefectureMutation) AddRecruitmentIDs(ids ...string) {
	if m.recruitments == nil {
		m.recruitments = make(map[string]struct{})
	}
	for i := range ids {
		m.recruitments[ids[i]] = struct{}{}
	}
}

// ClearRecruitments clears the "recruitments" edge to the Recruitment entity.
func (m *PrefectureMutation) ClearRecruitments() {
	m.clearedrecruitments = true
}

// RecruitmentsCleared reports if the "recruitments" edge to the Recruitment entity was cleared.
func (m *PrefectureMutation) RecruitmentsCleared() bool {
	return m.clearedrecruitments
}

// RemoveRecruitmentIDs removes the "recruitments" edge to the Recruitment entity by IDs.
func (m *PrefectureMutation) RemoveRecruitmentIDs(ids ...string) {
	if m.removedrecruitments == nil {
		m.removedrecruitments = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.recruitments, ids[i])
		m.removedrecruitments[ids[i]] = struct{}{}
	}
}

// RemovedRecruitments returns the removed IDs of the "recruitments" edge to the Recruitment entity.
func (m *PrefectureMutation) RemovedRecruitmentsIDs() (ids []string) {
	for id := range m.removedrecruitments {
		ids = append(ids, id)
	}
	return
}

// RecruitmentsIDs returns the "recruitments" edge IDs in the mutation.
func (m *PrefectureMutation) RecruitmentsIDs() (ids []string) {
	for id := range m.recruitments {
		ids = append(ids, id)
	}
	return
}

// ResetRecruitments resets all changes to the "recruitments" edge.
func (m *PrefectureMutation) ResetRecruitments() {
	m.recruitments = nil
	m.clearedrecruitments = false
	m.removedrecruitments = nil
}

// Where appends a list predicates to the PrefectureMutation builder.
func (m *PrefectureMutation) Where(ps ...predicate.Prefecture) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PrefectureMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Prefecture).
func (m *PrefectureMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PrefectureMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, prefecture.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, prefecture.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, prefecture.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PrefectureMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case prefecture.FieldCreatedAt:
		return m.CreatedAt()
	case prefecture.FieldUpdatedAt:
		return m.UpdatedAt()
	case prefecture.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PrefectureMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case prefecture.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case prefecture.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case prefecture.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Prefecture field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrefectureMutation) SetField(name string, value ent.Value) error {
	switch name {
	case prefecture.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case prefecture.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case prefecture.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Prefecture field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PrefectureMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PrefectureMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PrefectureMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Prefecture numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PrefectureMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PrefectureMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PrefectureMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Prefecture nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PrefectureMutation) ResetField(name string) error {
	switch name {
	case prefecture.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case prefecture.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case prefecture.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Prefecture field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PrefectureMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recruitments != nil {
		edges = append(edges, prefecture.EdgeRecruitments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PrefectureMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case prefecture.EdgeRecruitments:
		ids := make([]ent.Value, 0, len(m.recruitments))
		for id := range m.recruitments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PrefectureMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecruitments != nil {
		edges = append(edges, prefecture.EdgeRecruitments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PrefectureMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case prefecture.EdgeRecruitments:
		ids := make([]ent.Value, 0, len(m.removedrecruitments))
		for id := range m.removedrecruitments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PrefectureMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecruitments {
		edges = append(edges, prefecture.EdgeRecruitments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PrefectureMutation) EdgeCleared(name string) bool {
	switch name {
	case prefecture.EdgeRecruitments:
		return m.clearedrecruitments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PrefectureMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Prefecture unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PrefectureMutation) ResetEdge(name string) error {
	switch name {
	case prefecture.EdgeRecruitments:
		m.ResetRecruitments()
		return nil
	}
	return fmt.Errorf("unknown Prefecture edge %s", name)
}

// RecruitmentMutation represents an operation that mutates the Recruitment nodes in the graph.
type RecruitmentMutation struct {
	config
	op                 Op
	typ                string
	id                 *string
	created_at         *time.Time
	updated_at         *time.Time
	title              *string
	_type              *recruitment.Type
	level              *recruitment.Level
	place              *string
	start_at           *time.Time
	content            *string
	_Location_url      *string
	capacity           *int
	addcapacity        *int
	closing_at         *time.Time
	clearedFields      map[string]struct{}
	user               *string
	cleareduser        bool
	prefecture         *string
	clearedprefecture  bool
	competition        *string
	clearedcompetition bool
	done               bool
	oldValue           func(context.Context) (*Recruitment, error)
	predicates         []predicate.Recruitment
}

var _ ent.Mutation = (*RecruitmentMutation)(nil)

// recruitmentOption allows management of the mutation configuration using functional options.
type recruitmentOption func(*RecruitmentMutation)

// newRecruitmentMutation creates new mutation for the Recruitment entity.
func newRecruitmentMutation(c config, op Op, opts ...recruitmentOption) *RecruitmentMutation {
	m := &RecruitmentMutation{
		config:        c,
		op:            op,
		typ:           TypeRecruitment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecruitmentID sets the ID field of the mutation.
func withRecruitmentID(id string) recruitmentOption {
	return func(m *RecruitmentMutation) {
		var (
			err   error
			once  sync.Once
			value *Recruitment
		)
		m.oldValue = func(ctx context.Context) (*Recruitment, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Recruitment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecruitment sets the old Recruitment of the mutation.
func withRecruitment(node *Recruitment) recruitmentOption {
	return func(m *RecruitmentMutation) {
		m.oldValue = func(context.Context) (*Recruitment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecruitmentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecruitmentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Recruitment entities.
func (m *RecruitmentMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecruitmentMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *RecruitmentMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RecruitmentMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RecruitmentMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RecruitmentMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RecruitmentMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RecruitmentMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTitle sets the "title" field.
func (m *RecruitmentMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *RecruitmentMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *RecruitmentMutation) ResetTitle() {
	m.title = nil
}

// SetType sets the "type" field.
func (m *RecruitmentMutation) SetType(r recruitment.Type) {
	m._type = &r
}

// GetType returns the value of the "type" field in the mutation.
func (m *RecruitmentMutation) GetType() (r recruitment.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldType(ctx context.Context) (v recruitment.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RecruitmentMutation) ResetType() {
	m._type = nil
}

// SetLevel sets the "level" field.
func (m *RecruitmentMutation) SetLevel(r recruitment.Level) {
	m.level = &r
}

// Level returns the value of the "level" field in the mutation.
func (m *RecruitmentMutation) Level() (r recruitment.Level, exists bool) {
	v := m.level
	if v == nil {
		return
	}
	return *v, true
}

// OldLevel returns the old "level" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldLevel(ctx context.Context) (v recruitment.Level, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLevel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLevel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLevel: %w", err)
	}
	return oldValue.Level, nil
}

// ClearLevel clears the value of the "level" field.
func (m *RecruitmentMutation) ClearLevel() {
	m.level = nil
	m.clearedFields[recruitment.FieldLevel] = struct{}{}
}

// LevelCleared returns if the "level" field was cleared in this mutation.
func (m *RecruitmentMutation) LevelCleared() bool {
	_, ok := m.clearedFields[recruitment.FieldLevel]
	return ok
}

// ResetLevel resets all changes to the "level" field.
func (m *RecruitmentMutation) ResetLevel() {
	m.level = nil
	delete(m.clearedFields, recruitment.FieldLevel)
}

// SetPlace sets the "place" field.
func (m *RecruitmentMutation) SetPlace(s string) {
	m.place = &s
}

// Place returns the value of the "place" field in the mutation.
func (m *RecruitmentMutation) Place() (r string, exists bool) {
	v := m.place
	if v == nil {
		return
	}
	return *v, true
}

// OldPlace returns the old "place" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldPlace(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPlace is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPlace requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlace: %w", err)
	}
	return oldValue.Place, nil
}

// ClearPlace clears the value of the "place" field.
func (m *RecruitmentMutation) ClearPlace() {
	m.place = nil
	m.clearedFields[recruitment.FieldPlace] = struct{}{}
}

// PlaceCleared returns if the "place" field was cleared in this mutation.
func (m *RecruitmentMutation) PlaceCleared() bool {
	_, ok := m.clearedFields[recruitment.FieldPlace]
	return ok
}

// ResetPlace resets all changes to the "place" field.
func (m *RecruitmentMutation) ResetPlace() {
	m.place = nil
	delete(m.clearedFields, recruitment.FieldPlace)
}

// SetStartAt sets the "start_at" field.
func (m *RecruitmentMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *RecruitmentMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ClearStartAt clears the value of the "start_at" field.
func (m *RecruitmentMutation) ClearStartAt() {
	m.start_at = nil
	m.clearedFields[recruitment.FieldStartAt] = struct{}{}
}

// StartAtCleared returns if the "start_at" field was cleared in this mutation.
func (m *RecruitmentMutation) StartAtCleared() bool {
	_, ok := m.clearedFields[recruitment.FieldStartAt]
	return ok
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *RecruitmentMutation) ResetStartAt() {
	m.start_at = nil
	delete(m.clearedFields, recruitment.FieldStartAt)
}

// SetContent sets the "content" field.
func (m *RecruitmentMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *RecruitmentMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *RecruitmentMutation) ResetContent() {
	m.content = nil
}

// SetLocationURL sets the "Location_url" field.
func (m *RecruitmentMutation) SetLocationURL(s string) {
	m._Location_url = &s
}

// LocationURL returns the value of the "Location_url" field in the mutation.
func (m *RecruitmentMutation) LocationURL() (r string, exists bool) {
	v := m._Location_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLocationURL returns the old "Location_url" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldLocationURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLocationURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLocationURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocationURL: %w", err)
	}
	return oldValue.LocationURL, nil
}

// ClearLocationURL clears the value of the "Location_url" field.
func (m *RecruitmentMutation) ClearLocationURL() {
	m._Location_url = nil
	m.clearedFields[recruitment.FieldLocationURL] = struct{}{}
}

// LocationURLCleared returns if the "Location_url" field was cleared in this mutation.
func (m *RecruitmentMutation) LocationURLCleared() bool {
	_, ok := m.clearedFields[recruitment.FieldLocationURL]
	return ok
}

// ResetLocationURL resets all changes to the "Location_url" field.
func (m *RecruitmentMutation) ResetLocationURL() {
	m._Location_url = nil
	delete(m.clearedFields, recruitment.FieldLocationURL)
}

// SetCapacity sets the "capacity" field.
func (m *RecruitmentMutation) SetCapacity(i int) {
	m.capacity = &i
	m.addcapacity = nil
}

// Capacity returns the value of the "capacity" field in the mutation.
func (m *RecruitmentMutation) Capacity() (r int, exists bool) {
	v := m.capacity
	if v == nil {
		return
	}
	return *v, true
}

// OldCapacity returns the old "capacity" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldCapacity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCapacity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCapacity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCapacity: %w", err)
	}
	return oldValue.Capacity, nil
}

// AddCapacity adds i to the "capacity" field.
func (m *RecruitmentMutation) AddCapacity(i int) {
	if m.addcapacity != nil {
		*m.addcapacity += i
	} else {
		m.addcapacity = &i
	}
}

// AddedCapacity returns the value that was added to the "capacity" field in this mutation.
func (m *RecruitmentMutation) AddedCapacity() (r int, exists bool) {
	v := m.addcapacity
	if v == nil {
		return
	}
	return *v, true
}

// ResetCapacity resets all changes to the "capacity" field.
func (m *RecruitmentMutation) ResetCapacity() {
	m.capacity = nil
	m.addcapacity = nil
}

// SetClosingAt sets the "closing_at" field.
func (m *RecruitmentMutation) SetClosingAt(t time.Time) {
	m.closing_at = &t
}

// ClosingAt returns the value of the "closing_at" field in the mutation.
func (m *RecruitmentMutation) ClosingAt() (r time.Time, exists bool) {
	v := m.closing_at
	if v == nil {
		return
	}
	return *v, true
}

// OldClosingAt returns the old "closing_at" field's value of the Recruitment entity.
// If the Recruitment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecruitmentMutation) OldClosingAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldClosingAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldClosingAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClosingAt: %w", err)
	}
	return oldValue.ClosingAt, nil
}

// ResetClosingAt resets all changes to the "closing_at" field.
func (m *RecruitmentMutation) ResetClosingAt() {
	m.closing_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *RecruitmentMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *RecruitmentMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RecruitmentMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *RecruitmentMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RecruitmentMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RecruitmentMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetPrefectureID sets the "prefecture" edge to the Prefecture entity by id.
func (m *RecruitmentMutation) SetPrefectureID(id string) {
	m.prefecture = &id
}

// ClearPrefecture clears the "prefecture" edge to the Prefecture entity.
func (m *RecruitmentMutation) ClearPrefecture() {
	m.clearedprefecture = true
}

// PrefectureCleared reports if the "prefecture" edge to the Prefecture entity was cleared.
func (m *RecruitmentMutation) PrefectureCleared() bool {
	return m.clearedprefecture
}

// PrefectureID returns the "prefecture" edge ID in the mutation.
func (m *RecruitmentMutation) PrefectureID() (id string, exists bool) {
	if m.prefecture != nil {
		return *m.prefecture, true
	}
	return
}

// PrefectureIDs returns the "prefecture" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PrefectureID instead. It exists only for internal usage by the builders.
func (m *RecruitmentMutation) PrefectureIDs() (ids []string) {
	if id := m.prefecture; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPrefecture resets all changes to the "prefecture" edge.
func (m *RecruitmentMutation) ResetPrefecture() {
	m.prefecture = nil
	m.clearedprefecture = false
}

// SetCompetitionID sets the "competition" edge to the Competition entity by id.
func (m *RecruitmentMutation) SetCompetitionID(id string) {
	m.competition = &id
}

// ClearCompetition clears the "competition" edge to the Competition entity.
func (m *RecruitmentMutation) ClearCompetition() {
	m.clearedcompetition = true
}

// CompetitionCleared reports if the "competition" edge to the Competition entity was cleared.
func (m *RecruitmentMutation) CompetitionCleared() bool {
	return m.clearedcompetition
}

// CompetitionID returns the "competition" edge ID in the mutation.
func (m *RecruitmentMutation) CompetitionID() (id string, exists bool) {
	if m.competition != nil {
		return *m.competition, true
	}
	return
}

// CompetitionIDs returns the "competition" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CompetitionID instead. It exists only for internal usage by the builders.
func (m *RecruitmentMutation) CompetitionIDs() (ids []string) {
	if id := m.competition; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCompetition resets all changes to the "competition" edge.
func (m *RecruitmentMutation) ResetCompetition() {
	m.competition = nil
	m.clearedcompetition = false
}

// Where appends a list predicates to the RecruitmentMutation builder.
func (m *RecruitmentMutation) Where(ps ...predicate.Recruitment) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RecruitmentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Recruitment).
func (m *RecruitmentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecruitmentMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, recruitment.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, recruitment.FieldUpdatedAt)
	}
	if m.title != nil {
		fields = append(fields, recruitment.FieldTitle)
	}
	if m._type != nil {
		fields = append(fields, recruitment.FieldType)
	}
	if m.level != nil {
		fields = append(fields, recruitment.FieldLevel)
	}
	if m.place != nil {
		fields = append(fields, recruitment.FieldPlace)
	}
	if m.start_at != nil {
		fields = append(fields, recruitment.FieldStartAt)
	}
	if m.content != nil {
		fields = append(fields, recruitment.FieldContent)
	}
	if m._Location_url != nil {
		fields = append(fields, recruitment.FieldLocationURL)
	}
	if m.capacity != nil {
		fields = append(fields, recruitment.FieldCapacity)
	}
	if m.closing_at != nil {
		fields = append(fields, recruitment.FieldClosingAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecruitmentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recruitment.FieldCreatedAt:
		return m.CreatedAt()
	case recruitment.FieldUpdatedAt:
		return m.UpdatedAt()
	case recruitment.FieldTitle:
		return m.Title()
	case recruitment.FieldType:
		return m.GetType()
	case recruitment.FieldLevel:
		return m.Level()
	case recruitment.FieldPlace:
		return m.Place()
	case recruitment.FieldStartAt:
		return m.StartAt()
	case recruitment.FieldContent:
		return m.Content()
	case recruitment.FieldLocationURL:
		return m.LocationURL()
	case recruitment.FieldCapacity:
		return m.Capacity()
	case recruitment.FieldClosingAt:
		return m.ClosingAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecruitmentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recruitment.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case recruitment.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case recruitment.FieldTitle:
		return m.OldTitle(ctx)
	case recruitment.FieldType:
		return m.OldType(ctx)
	case recruitment.FieldLevel:
		return m.OldLevel(ctx)
	case recruitment.FieldPlace:
		return m.OldPlace(ctx)
	case recruitment.FieldStartAt:
		return m.OldStartAt(ctx)
	case recruitment.FieldContent:
		return m.OldContent(ctx)
	case recruitment.FieldLocationURL:
		return m.OldLocationURL(ctx)
	case recruitment.FieldCapacity:
		return m.OldCapacity(ctx)
	case recruitment.FieldClosingAt:
		return m.OldClosingAt(ctx)
	}
	return nil, fmt.Errorf("unknown Recruitment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecruitmentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recruitment.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case recruitment.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case recruitment.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case recruitment.FieldType:
		v, ok := value.(recruitment.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case recruitment.FieldLevel:
		v, ok := value.(recruitment.Level)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLevel(v)
		return nil
	case recruitment.FieldPlace:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlace(v)
		return nil
	case recruitment.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case recruitment.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case recruitment.FieldLocationURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocationURL(v)
		return nil
	case recruitment.FieldCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCapacity(v)
		return nil
	case recruitment.FieldClosingAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClosingAt(v)
		return nil
	}
	return fmt.Errorf("unknown Recruitment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecruitmentMutation) AddedFields() []string {
	var fields []string
	if m.addcapacity != nil {
		fields = append(fields, recruitment.FieldCapacity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecruitmentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recruitment.FieldCapacity:
		return m.AddedCapacity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecruitmentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recruitment.FieldCapacity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCapacity(v)
		return nil
	}
	return fmt.Errorf("unknown Recruitment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecruitmentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(recruitment.FieldLevel) {
		fields = append(fields, recruitment.FieldLevel)
	}
	if m.FieldCleared(recruitment.FieldPlace) {
		fields = append(fields, recruitment.FieldPlace)
	}
	if m.FieldCleared(recruitment.FieldStartAt) {
		fields = append(fields, recruitment.FieldStartAt)
	}
	if m.FieldCleared(recruitment.FieldLocationURL) {
		fields = append(fields, recruitment.FieldLocationURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecruitmentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecruitmentMutation) ClearField(name string) error {
	switch name {
	case recruitment.FieldLevel:
		m.ClearLevel()
		return nil
	case recruitment.FieldPlace:
		m.ClearPlace()
		return nil
	case recruitment.FieldStartAt:
		m.ClearStartAt()
		return nil
	case recruitment.FieldLocationURL:
		m.ClearLocationURL()
		return nil
	}
	return fmt.Errorf("unknown Recruitment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecruitmentMutation) ResetField(name string) error {
	switch name {
	case recruitment.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case recruitment.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case recruitment.FieldTitle:
		m.ResetTitle()
		return nil
	case recruitment.FieldType:
		m.ResetType()
		return nil
	case recruitment.FieldLevel:
		m.ResetLevel()
		return nil
	case recruitment.FieldPlace:
		m.ResetPlace()
		return nil
	case recruitment.FieldStartAt:
		m.ResetStartAt()
		return nil
	case recruitment.FieldContent:
		m.ResetContent()
		return nil
	case recruitment.FieldLocationURL:
		m.ResetLocationURL()
		return nil
	case recruitment.FieldCapacity:
		m.ResetCapacity()
		return nil
	case recruitment.FieldClosingAt:
		m.ResetClosingAt()
		return nil
	}
	return fmt.Errorf("unknown Recruitment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecruitmentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, recruitment.EdgeUser)
	}
	if m.prefecture != nil {
		edges = append(edges, recruitment.EdgePrefecture)
	}
	if m.competition != nil {
		edges = append(edges, recruitment.EdgeCompetition)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecruitmentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recruitment.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case recruitment.EdgePrefecture:
		if id := m.prefecture; id != nil {
			return []ent.Value{*id}
		}
	case recruitment.EdgeCompetition:
		if id := m.competition; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecruitmentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecruitmentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecruitmentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, recruitment.EdgeUser)
	}
	if m.clearedprefecture {
		edges = append(edges, recruitment.EdgePrefecture)
	}
	if m.clearedcompetition {
		edges = append(edges, recruitment.EdgeCompetition)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecruitmentMutation) EdgeCleared(name string) bool {
	switch name {
	case recruitment.EdgeUser:
		return m.cleareduser
	case recruitment.EdgePrefecture:
		return m.clearedprefecture
	case recruitment.EdgeCompetition:
		return m.clearedcompetition
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecruitmentMutation) ClearEdge(name string) error {
	switch name {
	case recruitment.EdgeUser:
		m.ClearUser()
		return nil
	case recruitment.EdgePrefecture:
		m.ClearPrefecture()
		return nil
	case recruitment.EdgeCompetition:
		m.ClearCompetition()
		return nil
	}
	return fmt.Errorf("unknown Recruitment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecruitmentMutation) ResetEdge(name string) error {
	switch name {
	case recruitment.EdgeUser:
		m.ResetUser()
		return nil
	case recruitment.EdgePrefecture:
		m.ResetPrefecture()
		return nil
	case recruitment.EdgeCompetition:
		m.ResetCompetition()
		return nil
	}
	return fmt.Errorf("unknown Recruitment edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                                  Op
	typ                                 string
	id                                  *string
	created_at                          *time.Time
	updated_at                          *time.Time
	name                                *string
	email                               *string
	role                                *user.Role
	avatar                              *string
	introduction                        *string
	email_verification_status           *user.EmailVerificationStatus
	email_verification_token            *string
	email_verification_token_expires_at *time.Time
	password_digest                     *string
	last_sign_in_at                     *time.Time
	clearedFields                       map[string]struct{}
	recruitments                        map[string]struct{}
	removedrecruitments                 map[string]struct{}
	clearedrecruitments                 bool
	done                                bool
	oldValue                            func(context.Context) (*User, error)
	predicates                          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
}

// SetIntroduction sets the "introduction" field.
func (m *UserMutation) SetIntroduction(s string) {
	m.introduction = &s
}

// Introduction returns the value of the "introduction" field in the mutation.
func (m *UserMutation) Introduction() (r string, exists bool) {
	v := m.introduction
	if v == nil {
		return
	}
	return *v, true
}

// OldIntroduction returns the old "introduction" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIntroduction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIntroduction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIntroduction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntroduction: %w", err)
	}
	return oldValue.Introduction, nil
}

// ClearIntroduction clears the value of the "introduction" field.
func (m *UserMutation) ClearIntroduction() {
	m.introduction = nil
	m.clearedFields[user.FieldIntroduction] = struct{}{}
}

// IntroductionCleared returns if the "introduction" field was cleared in this mutation.
func (m *UserMutation) IntroductionCleared() bool {
	_, ok := m.clearedFields[user.FieldIntroduction]
	return ok
}

// ResetIntroduction resets all changes to the "introduction" field.
func (m *UserMutation) ResetIntroduction() {
	m.introduction = nil
	delete(m.clearedFields, user.FieldIntroduction)
}

// SetEmailVerificationStatus sets the "email_verification_status" field.
func (m *UserMutation) SetEmailVerificationStatus(uvs user.EmailVerificationStatus) {
	m.email_verification_status = &uvs
}

// EmailVerificationStatus returns the value of the "email_verification_status" field in the mutation.
func (m *UserMutation) EmailVerificationStatus() (r user.EmailVerificationStatus, exists bool) {
	v := m.email_verification_status
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerificationStatus returns the old "email_verification_status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailVerificationStatus(ctx context.Context) (v user.EmailVerificationStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmailVerificationStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmailVerificationStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerificationStatus: %w", err)
	}
	return oldValue.EmailVerificationStatus, nil
}

// ResetEmailVerificationStatus resets all changes to the "email_verification_status" field.
func (m *UserMutation) ResetEmailVerificationStatus() {
	m.email_verification_status = nil
}

// SetEmailVerificationToken sets the "email_verification_token" field.
func (m *UserMutation) SetEmailVerificationToken(s string) {
	m.email_verification_token = &s
}

// EmailVerificationToken returns the value of the "email_verification_token" field in the mutation.
func (m *UserMutation) EmailVerificationToken() (r string, exists bool) {
	v := m.email_verification_token
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerificationToken returns the old "email_verification_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailVerificationToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmailVerificationToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmailVerificationToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerificationToken: %w", err)
	}
	return oldValue.EmailVerificationToken, nil
}

// ClearEmailVerificationToken clears the value of the "email_verification_token" field.
func (m *UserMutation) ClearEmailVerificationToken() {
	m.email_verification_token = nil
	m.clearedFields[user.FieldEmailVerificationToken] = struct{}{}
}

// EmailVerificationTokenCleared returns if the "email_verification_token" field was cleared in this mutation.
func (m *UserMutation) EmailVerificationTokenCleared() bool {
	_, ok := m.clearedFields[user.FieldEmailVerificationToken]
	return ok
}

// ResetEmailVerificationToken resets all changes to the "email_verification_token" field.
func (m *UserMutation) ResetEmailVerificationToken() {
	m.email_verification_token = nil
	delete(m.clearedFields, user.FieldEmailVerificationToken)
}

// SetEmailVerificationTokenExpiresAt sets the "email_verification_token_expires_at" field.
func (m *UserMutation) SetEmailVerificationTokenExpiresAt(t time.Time) {
	m.email_verification_token_expires_at = &t
}

// EmailVerificationTokenExpiresAt returns the value of the "email_verification_token_expires_at" field in the mutation.
func (m *UserMutation) EmailVerificationTokenExpiresAt() (r time.Time, exists bool) {
	v := m.email_verification_token_expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailVerificationTokenExpiresAt returns the old "email_verification_token_expires_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailVerificationTokenExpiresAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmailVerificationTokenExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmailVerificationTokenExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailVerificationTokenExpiresAt: %w", err)
	}
	return oldValue.EmailVerificationTokenExpiresAt, nil
}

// ClearEmailVerificationTokenExpiresAt clears the value of the "email_verification_token_expires_at" field.
func (m *UserMutation) ClearEmailVerificationTokenExpiresAt() {
	m.email_verification_token_expires_at = nil
	m.clearedFields[user.FieldEmailVerificationTokenExpiresAt] = struct{}{}
}

// EmailVerificationTokenExpiresAtCleared returns if the "email_verification_token_expires_at" field was cleared in this mutation.
func (m *UserMutation) EmailVerificationTokenExpiresAtCleared() bool {
	_, ok := m.clearedFields[user.FieldEmailVerificationTokenExpiresAt]
	return ok
}

// ResetEmailVerificationTokenExpiresAt resets all changes to the "email_verification_token_expires_at" field.
func (m *UserMutation) ResetEmailVerificationTokenExpiresAt() {
	m.email_verification_token_expires_at = nil
	delete(m.clearedFields, user.FieldEmailVerificationTokenExpiresAt)
}

// SetPasswordDigest sets the "password_digest" field.
func (m *UserMutation) SetPasswordDigest(s string) {
	m.password_digest = &s
}

// PasswordDigest returns the value of the "password_digest" field in the mutation.
func (m *UserMutation) PasswordDigest() (r string, exists bool) {
	v := m.password_digest
	if v == nil {
		return
	}
	return *v, true
}

// OldPasswordDigest returns the old "password_digest" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPasswordDigest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPasswordDigest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPasswordDigest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPasswordDigest: %w", err)
	}
	return oldValue.PasswordDigest, nil
}

// ClearPasswordDigest clears the value of the "password_digest" field.
func (m *UserMutation) ClearPasswordDigest() {
	m.password_digest = nil
	m.clearedFields[user.FieldPasswordDigest] = struct{}{}
}

// PasswordDigestCleared returns if the "password_digest" field was cleared in this mutation.
func (m *UserMutation) PasswordDigestCleared() bool {
	_, ok := m.clearedFields[user.FieldPasswordDigest]
	return ok
}

// ResetPasswordDigest resets all changes to the "password_digest" field.
func (m *UserMutation) ResetPasswordDigest() {
	m.password_digest = nil
	delete(m.clearedFields, user.FieldPasswordDigest)
}

// SetLastSignInAt sets the "last_sign_in_at" field.
func (m *UserMutation) SetLastSignInAt(t time.Time) {
	m.last_sign_in_at = &t
}

// LastSignInAt returns the value of the "last_sign_in_at" field in the mutation.
func (m *UserMutation) LastSignInAt() (r time.Time, exists bool) {
	v := m.last_sign_in_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSignInAt returns the old "last_sign_in_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastSignInAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastSignInAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastSignInAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSignInAt: %w", err)
	}
	return oldValue.LastSignInAt, nil
}

// ClearLastSignInAt clears the value of the "last_sign_in_at" field.
func (m *UserMutation) ClearLastSignInAt() {
	m.last_sign_in_at = nil
	m.clearedFields[user.FieldLastSignInAt] = struct{}{}
}

// LastSignInAtCleared returns if the "last_sign_in_at" field was cleared in this mutation.
func (m *UserMutation) LastSignInAtCleared() bool {
	_, ok := m.clearedFields[user.FieldLastSignInAt]
	return ok
}

// ResetLastSignInAt resets all changes to the "last_sign_in_at" field.
func (m *UserMutation) ResetLastSignInAt() {
	m.last_sign_in_at = nil
	delete(m.clearedFields, user.FieldLastSignInAt)
}

// AddRecruitmentIDs adds the "recruitments" edge to the Recruitment entity by ids.
func (m *UserMutation) AddRecruitmentIDs(ids ...string) {
	if m.recruitments == nil {
		m.recruitments = make(map[string]struct{})
	}
	for i := range ids {
		m.recruitments[ids[i]] = struct{}{}
	}
}

// ClearRecruitments clears the "recruitments" edge to the Recruitment entity.
func (m *UserMutation) ClearRecruitments() {
	m.clearedrecruitments = true
}

// RecruitmentsCleared reports if the "recruitments" edge to the Recruitment entity was cleared.
func (m *UserMutation) RecruitmentsCleared() bool {
	return m.clearedrecruitments
}

// RemoveRecruitmentIDs removes the "recruitments" edge to the Recruitment entity by IDs.
func (m *UserMutation) RemoveRecruitmentIDs(ids ...string) {
	if m.removedrecruitments == nil {
		m.removedrecruitments = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.recruitments, ids[i])
		m.removedrecruitments[ids[i]] = struct{}{}
	}
}

// RemovedRecruitments returns the removed IDs of the "recruitments" edge to the Recruitment entity.
func (m *UserMutation) RemovedRecruitmentsIDs() (ids []string) {
	for id := range m.removedrecruitments {
		ids = append(ids, id)
	}
	return
}

// RecruitmentsIDs returns the "recruitments" edge IDs in the mutation.
func (m *UserMutation) RecruitmentsIDs() (ids []string) {
	for id := range m.recruitments {
		ids = append(ids, id)
	}
	return
}

// ResetRecruitments resets all changes to the "recruitments" edge.
func (m *UserMutation) ResetRecruitments() {
	m.recruitments = nil
	m.clearedrecruitments = false
	m.removedrecruitments = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.introduction != nil {
		fields = append(fields, user.FieldIntroduction)
	}
	if m.email_verification_status != nil {
		fields = append(fields, user.FieldEmailVerificationStatus)
	}
	if m.email_verification_token != nil {
		fields = append(fields, user.FieldEmailVerificationToken)
	}
	if m.email_verification_token_expires_at != nil {
		fields = append(fields, user.FieldEmailVerificationTokenExpiresAt)
	}
	if m.password_digest != nil {
		fields = append(fields, user.FieldPasswordDigest)
	}
	if m.last_sign_in_at != nil {
		fields = append(fields, user.FieldLastSignInAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldRole:
		return m.Role()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldIntroduction:
		return m.Introduction()
	case user.FieldEmailVerificationStatus:
		return m.EmailVerificationStatus()
	case user.FieldEmailVerificationToken:
		return m.EmailVerificationToken()
	case user.FieldEmailVerificationTokenExpiresAt:
		return m.EmailVerificationTokenExpiresAt()
	case user.FieldPasswordDigest:
		return m.PasswordDigest()
	case user.FieldLastSignInAt:
		return m.LastSignInAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldIntroduction:
		return m.OldIntroduction(ctx)
	case user.FieldEmailVerificationStatus:
		return m.OldEmailVerificationStatus(ctx)
	case user.FieldEmailVerificationToken:
		return m.OldEmailVerificationToken(ctx)
	case user.FieldEmailVerificationTokenExpiresAt:
		return m.OldEmailVerificationTokenExpiresAt(ctx)
	case user.FieldPasswordDigest:
		return m.OldPasswordDigest(ctx)
	case user.FieldLastSignInAt:
		return m.OldLastSignInAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldIntroduction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntroduction(v)
		return nil
	case user.FieldEmailVerificationStatus:
		v, ok := value.(user.EmailVerificationStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerificationStatus(v)
		return nil
	case user.FieldEmailVerificationToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerificationToken(v)
		return nil
	case user.FieldEmailVerificationTokenExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailVerificationTokenExpiresAt(v)
		return nil
	case user.FieldPasswordDigest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPasswordDigest(v)
		return nil
	case user.FieldLastSignInAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSignInAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldIntroduction) {
		fields = append(fields, user.FieldIntroduction)
	}
	if m.FieldCleared(user.FieldEmailVerificationToken) {
		fields = append(fields, user.FieldEmailVerificationToken)
	}
	if m.FieldCleared(user.FieldEmailVerificationTokenExpiresAt) {
		fields = append(fields, user.FieldEmailVerificationTokenExpiresAt)
	}
	if m.FieldCleared(user.FieldPasswordDigest) {
		fields = append(fields, user.FieldPasswordDigest)
	}
	if m.FieldCleared(user.FieldLastSignInAt) {
		fields = append(fields, user.FieldLastSignInAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldIntroduction:
		m.ClearIntroduction()
		return nil
	case user.FieldEmailVerificationToken:
		m.ClearEmailVerificationToken()
		return nil
	case user.FieldEmailVerificationTokenExpiresAt:
		m.ClearEmailVerificationTokenExpiresAt()
		return nil
	case user.FieldPasswordDigest:
		m.ClearPasswordDigest()
		return nil
	case user.FieldLastSignInAt:
		m.ClearLastSignInAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldIntroduction:
		m.ResetIntroduction()
		return nil
	case user.FieldEmailVerificationStatus:
		m.ResetEmailVerificationStatus()
		return nil
	case user.FieldEmailVerificationToken:
		m.ResetEmailVerificationToken()
		return nil
	case user.FieldEmailVerificationTokenExpiresAt:
		m.ResetEmailVerificationTokenExpiresAt()
		return nil
	case user.FieldPasswordDigest:
		m.ResetPasswordDigest()
		return nil
	case user.FieldLastSignInAt:
		m.ResetLastSignInAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recruitments != nil {
		edges = append(edges, user.EdgeRecruitments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRecruitments:
		ids := make([]ent.Value, 0, len(m.recruitments))
		for id := range m.recruitments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecruitments != nil {
		edges = append(edges, user.EdgeRecruitments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeRecruitments:
		ids := make([]ent.Value, 0, len(m.removedrecruitments))
		for id := range m.removedrecruitments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecruitments {
		edges = append(edges, user.EdgeRecruitments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeRecruitments:
		return m.clearedrecruitments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeRecruitments:
		m.ResetRecruitments()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
