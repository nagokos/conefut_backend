// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/nagokos/connefut_backend/ent/competition"
	"github.com/nagokos/connefut_backend/ent/prefecture"
	"github.com/nagokos/connefut_backend/ent/recruitment"
	"github.com/nagokos/connefut_backend/ent/user"
)

// Recruitment is the model entity for the Recruitment schema.
type Recruitment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type recruitment.Type `json:"type,omitempty"`
	// Level holds the value of the "level" field.
	Level recruitment.Level `json:"level,omitempty"`
	// Place holds the value of the "place" field.
	Place string `json:"place,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// Content holds the value of the "content" field.
	// 募集詳細
	Content string `json:"content,omitempty"`
	// LocationURL holds the value of the "Location_url" field.
	// 会場の場所を埋め込むURL
	LocationURL string `json:"Location_url,omitempty"`
	// Capacity holds the value of the "capacity" field.
	Capacity int `json:"capacity,omitempty"`
	// ClosingAt holds the value of the "closing_at" field.
	// 募集期限
	ClosingAt time.Time `json:"closing_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecruitmentQuery when eager-loading is set.
	Edges          RecruitmentEdges `json:"edges"`
	competition_id *string
	prefecture_id  *string
	user_id        *string
}

// RecruitmentEdges holds the relations/edges for other nodes in the graph.
type RecruitmentEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Prefecture holds the value of the prefecture edge.
	Prefecture *Prefecture `json:"prefecture,omitempty"`
	// Competition holds the value of the competition edge.
	Competition *Competition `json:"competition,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecruitmentEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// PrefectureOrErr returns the Prefecture value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecruitmentEdges) PrefectureOrErr() (*Prefecture, error) {
	if e.loadedTypes[1] {
		if e.Prefecture == nil {
			// The edge prefecture was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: prefecture.Label}
		}
		return e.Prefecture, nil
	}
	return nil, &NotLoadedError{edge: "prefecture"}
}

// CompetitionOrErr returns the Competition value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RecruitmentEdges) CompetitionOrErr() (*Competition, error) {
	if e.loadedTypes[2] {
		if e.Competition == nil {
			// The edge competition was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: competition.Label}
		}
		return e.Competition, nil
	}
	return nil, &NotLoadedError{edge: "competition"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recruitment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case recruitment.FieldCapacity:
			values[i] = new(sql.NullInt64)
		case recruitment.FieldID, recruitment.FieldTitle, recruitment.FieldType, recruitment.FieldLevel, recruitment.FieldPlace, recruitment.FieldContent, recruitment.FieldLocationURL:
			values[i] = new(sql.NullString)
		case recruitment.FieldCreatedAt, recruitment.FieldUpdatedAt, recruitment.FieldStartAt, recruitment.FieldClosingAt:
			values[i] = new(sql.NullTime)
		case recruitment.ForeignKeys[0]: // competition_id
			values[i] = new(sql.NullString)
		case recruitment.ForeignKeys[1]: // prefecture_id
			values[i] = new(sql.NullString)
		case recruitment.ForeignKeys[2]: // user_id
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Recruitment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recruitment fields.
func (r *Recruitment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recruitment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case recruitment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case recruitment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case recruitment.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				r.Title = value.String
			}
		case recruitment.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = recruitment.Type(value.String)
			}
		case recruitment.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				r.Level = recruitment.Level(value.String)
			}
		case recruitment.FieldPlace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field place", values[i])
			} else if value.Valid {
				r.Place = value.String
			}
		case recruitment.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				r.StartAt = value.Time
			}
		case recruitment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				r.Content = value.String
			}
		case recruitment.FieldLocationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Location_url", values[i])
			} else if value.Valid {
				r.LocationURL = value.String
			}
		case recruitment.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				r.Capacity = int(value.Int64)
			}
		case recruitment.FieldClosingAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field closing_at", values[i])
			} else if value.Valid {
				r.ClosingAt = value.Time
			}
		case recruitment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field competition_id", values[i])
			} else if value.Valid {
				r.competition_id = new(string)
				*r.competition_id = value.String
			}
		case recruitment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prefecture_id", values[i])
			} else if value.Valid {
				r.prefecture_id = new(string)
				*r.prefecture_id = value.String
			}
		case recruitment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.user_id = new(string)
				*r.user_id = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Recruitment entity.
func (r *Recruitment) QueryUser() *UserQuery {
	return (&RecruitmentClient{config: r.config}).QueryUser(r)
}

// QueryPrefecture queries the "prefecture" edge of the Recruitment entity.
func (r *Recruitment) QueryPrefecture() *PrefectureQuery {
	return (&RecruitmentClient{config: r.config}).QueryPrefecture(r)
}

// QueryCompetition queries the "competition" edge of the Recruitment entity.
func (r *Recruitment) QueryCompetition() *CompetitionQuery {
	return (&RecruitmentClient{config: r.config}).QueryCompetition(r)
}

// Update returns a builder for updating this Recruitment.
// Note that you need to call Recruitment.Unwrap() before calling this method if this Recruitment
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recruitment) Update() *RecruitmentUpdateOne {
	return (&RecruitmentClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Recruitment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recruitment) Unwrap() *Recruitment {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recruitment is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recruitment) String() string {
	var builder strings.Builder
	builder.WriteString("Recruitment(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(r.Title)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", r.Level))
	builder.WriteString(", place=")
	builder.WriteString(r.Place)
	builder.WriteString(", start_at=")
	builder.WriteString(r.StartAt.Format(time.ANSIC))
	builder.WriteString(", content=")
	builder.WriteString(r.Content)
	builder.WriteString(", Location_url=")
	builder.WriteString(r.LocationURL)
	builder.WriteString(", capacity=")
	builder.WriteString(fmt.Sprintf("%v", r.Capacity))
	builder.WriteString(", closing_at=")
	builder.WriteString(r.ClosingAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Recruitments is a parsable slice of Recruitment.
type Recruitments []*Recruitment

func (r Recruitments) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
