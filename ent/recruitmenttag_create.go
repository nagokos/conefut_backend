// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nagokos/connefut_backend/ent/recruitment"
	"github.com/nagokos/connefut_backend/ent/recruitmenttag"
	"github.com/nagokos/connefut_backend/ent/tag"
)

// RecruitmentTagCreate is the builder for creating a RecruitmentTag entity.
type RecruitmentTagCreate struct {
	config
	mutation *RecruitmentTagMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (rtc *RecruitmentTagCreate) SetCreatedAt(t time.Time) *RecruitmentTagCreate {
	rtc.mutation.SetCreatedAt(t)
	return rtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtc *RecruitmentTagCreate) SetNillableCreatedAt(t *time.Time) *RecruitmentTagCreate {
	if t != nil {
		rtc.SetCreatedAt(*t)
	}
	return rtc
}

// SetUpdatedAt sets the "updated_at" field.
func (rtc *RecruitmentTagCreate) SetUpdatedAt(t time.Time) *RecruitmentTagCreate {
	rtc.mutation.SetUpdatedAt(t)
	return rtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rtc *RecruitmentTagCreate) SetNillableUpdatedAt(t *time.Time) *RecruitmentTagCreate {
	if t != nil {
		rtc.SetUpdatedAt(*t)
	}
	return rtc
}

// SetRecruitmentID sets the "recruitment_id" field.
func (rtc *RecruitmentTagCreate) SetRecruitmentID(s string) *RecruitmentTagCreate {
	rtc.mutation.SetRecruitmentID(s)
	return rtc
}

// SetTagID sets the "tag_id" field.
func (rtc *RecruitmentTagCreate) SetTagID(s string) *RecruitmentTagCreate {
	rtc.mutation.SetTagID(s)
	return rtc
}

// SetID sets the "id" field.
func (rtc *RecruitmentTagCreate) SetID(s string) *RecruitmentTagCreate {
	rtc.mutation.SetID(s)
	return rtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rtc *RecruitmentTagCreate) SetNillableID(s *string) *RecruitmentTagCreate {
	if s != nil {
		rtc.SetID(*s)
	}
	return rtc
}

// SetRecruitment sets the "recruitment" edge to the Recruitment entity.
func (rtc *RecruitmentTagCreate) SetRecruitment(r *Recruitment) *RecruitmentTagCreate {
	return rtc.SetRecruitmentID(r.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (rtc *RecruitmentTagCreate) SetTag(t *Tag) *RecruitmentTagCreate {
	return rtc.SetTagID(t.ID)
}

// Mutation returns the RecruitmentTagMutation object of the builder.
func (rtc *RecruitmentTagCreate) Mutation() *RecruitmentTagMutation {
	return rtc.mutation
}

// Save creates the RecruitmentTag in the database.
func (rtc *RecruitmentTagCreate) Save(ctx context.Context) (*RecruitmentTag, error) {
	var (
		err  error
		node *RecruitmentTag
	)
	rtc.defaults()
	if len(rtc.hooks) == 0 {
		if err = rtc.check(); err != nil {
			return nil, err
		}
		node, err = rtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecruitmentTagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtc.check(); err != nil {
				return nil, err
			}
			rtc.mutation = mutation
			if node, err = rtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rtc.hooks) - 1; i >= 0; i-- {
			if rtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *RecruitmentTagCreate) SaveX(ctx context.Context) *RecruitmentTag {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *RecruitmentTagCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *RecruitmentTagCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtc *RecruitmentTagCreate) defaults() {
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		v := recruitmenttag.DefaultCreatedAt()
		rtc.mutation.SetCreatedAt(v)
	}
	if _, ok := rtc.mutation.UpdatedAt(); !ok {
		v := recruitmenttag.DefaultUpdatedAt()
		rtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rtc.mutation.ID(); !ok {
		v := recruitmenttag.DefaultID()
		rtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *RecruitmentTagCreate) check() error {
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RecruitmentTag.created_at"`)}
	}
	if _, ok := rtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RecruitmentTag.updated_at"`)}
	}
	if _, ok := rtc.mutation.RecruitmentID(); !ok {
		return &ValidationError{Name: "recruitment_id", err: errors.New(`ent: missing required field "RecruitmentTag.recruitment_id"`)}
	}
	if _, ok := rtc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "RecruitmentTag.tag_id"`)}
	}
	if v, ok := rtc.mutation.ID(); ok {
		if err := recruitmenttag.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "RecruitmentTag.id": %w`, err)}
		}
	}
	if _, ok := rtc.mutation.RecruitmentID(); !ok {
		return &ValidationError{Name: "recruitment", err: errors.New(`ent: missing required edge "RecruitmentTag.recruitment"`)}
	}
	if _, ok := rtc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "RecruitmentTag.tag"`)}
	}
	return nil
}

func (rtc *RecruitmentTagCreate) sqlSave(ctx context.Context) (*RecruitmentTag, error) {
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RecruitmentTag.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (rtc *RecruitmentTagCreate) createSpec() (*RecruitmentTag, *sqlgraph.CreateSpec) {
	var (
		_node = &RecruitmentTag{config: rtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: recruitmenttag.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: recruitmenttag.FieldID,
			},
		}
	)
	_spec.OnConflict = rtc.conflict
	if id, ok := rtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rtc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitmenttag.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rtc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: recruitmenttag.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if nodes := rtc.mutation.RecruitmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recruitmenttag.RecruitmentTable,
			Columns: []string{recruitmenttag.RecruitmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: recruitment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RecruitmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rtc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recruitmenttag.TagTable,
			Columns: []string{recruitmenttag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RecruitmentTag.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecruitmentTagUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rtc *RecruitmentTagCreate) OnConflict(opts ...sql.ConflictOption) *RecruitmentTagUpsertOne {
	rtc.conflict = opts
	return &RecruitmentTagUpsertOne{
		create: rtc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RecruitmentTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rtc *RecruitmentTagCreate) OnConflictColumns(columns ...string) *RecruitmentTagUpsertOne {
	rtc.conflict = append(rtc.conflict, sql.ConflictColumns(columns...))
	return &RecruitmentTagUpsertOne{
		create: rtc,
	}
}

type (
	// RecruitmentTagUpsertOne is the builder for "upsert"-ing
	//  one RecruitmentTag node.
	RecruitmentTagUpsertOne struct {
		create *RecruitmentTagCreate
	}

	// RecruitmentTagUpsert is the "OnConflict" setter.
	RecruitmentTagUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RecruitmentTagUpsert) SetCreatedAt(v time.Time) *RecruitmentTagUpsert {
	u.Set(recruitmenttag.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RecruitmentTagUpsert) UpdateCreatedAt() *RecruitmentTagUpsert {
	u.SetExcluded(recruitmenttag.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecruitmentTagUpsert) SetUpdatedAt(v time.Time) *RecruitmentTagUpsert {
	u.Set(recruitmenttag.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecruitmentTagUpsert) UpdateUpdatedAt() *RecruitmentTagUpsert {
	u.SetExcluded(recruitmenttag.FieldUpdatedAt)
	return u
}

// SetRecruitmentID sets the "recruitment_id" field.
func (u *RecruitmentTagUpsert) SetRecruitmentID(v string) *RecruitmentTagUpsert {
	u.Set(recruitmenttag.FieldRecruitmentID, v)
	return u
}

// UpdateRecruitmentID sets the "recruitment_id" field to the value that was provided on create.
func (u *RecruitmentTagUpsert) UpdateRecruitmentID() *RecruitmentTagUpsert {
	u.SetExcluded(recruitmenttag.FieldRecruitmentID)
	return u
}

// SetTagID sets the "tag_id" field.
func (u *RecruitmentTagUpsert) SetTagID(v string) *RecruitmentTagUpsert {
	u.Set(recruitmenttag.FieldTagID, v)
	return u
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *RecruitmentTagUpsert) UpdateTagID() *RecruitmentTagUpsert {
	u.SetExcluded(recruitmenttag.FieldTagID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RecruitmentTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(recruitmenttag.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RecruitmentTagUpsertOne) UpdateNewValues() *RecruitmentTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(recruitmenttag.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(recruitmenttag.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.RecruitmentTag.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *RecruitmentTagUpsertOne) Ignore() *RecruitmentTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecruitmentTagUpsertOne) DoNothing() *RecruitmentTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecruitmentTagCreate.OnConflict
// documentation for more info.
func (u *RecruitmentTagUpsertOne) Update(set func(*RecruitmentTagUpsert)) *RecruitmentTagUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecruitmentTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RecruitmentTagUpsertOne) SetCreatedAt(v time.Time) *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RecruitmentTagUpsertOne) UpdateCreatedAt() *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecruitmentTagUpsertOne) SetUpdatedAt(v time.Time) *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecruitmentTagUpsertOne) UpdateUpdatedAt() *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRecruitmentID sets the "recruitment_id" field.
func (u *RecruitmentTagUpsertOne) SetRecruitmentID(v string) *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetRecruitmentID(v)
	})
}

// UpdateRecruitmentID sets the "recruitment_id" field to the value that was provided on create.
func (u *RecruitmentTagUpsertOne) UpdateRecruitmentID() *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateRecruitmentID()
	})
}

// SetTagID sets the "tag_id" field.
func (u *RecruitmentTagUpsertOne) SetTagID(v string) *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *RecruitmentTagUpsertOne) UpdateTagID() *RecruitmentTagUpsertOne {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateTagID()
	})
}

// Exec executes the query.
func (u *RecruitmentTagUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecruitmentTagCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecruitmentTagUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RecruitmentTagUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RecruitmentTagUpsertOne.ID is not supported by MySQL driver. Use RecruitmentTagUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RecruitmentTagUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RecruitmentTagCreateBulk is the builder for creating many RecruitmentTag entities in bulk.
type RecruitmentTagCreateBulk struct {
	config
	builders []*RecruitmentTagCreate
	conflict []sql.ConflictOption
}

// Save creates the RecruitmentTag entities in the database.
func (rtcb *RecruitmentTagCreateBulk) Save(ctx context.Context) ([]*RecruitmentTag, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*RecruitmentTag, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecruitmentTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rtcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *RecruitmentTagCreateBulk) SaveX(ctx context.Context) []*RecruitmentTag {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *RecruitmentTagCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *RecruitmentTagCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RecruitmentTag.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RecruitmentTagUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (rtcb *RecruitmentTagCreateBulk) OnConflict(opts ...sql.ConflictOption) *RecruitmentTagUpsertBulk {
	rtcb.conflict = opts
	return &RecruitmentTagUpsertBulk{
		create: rtcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RecruitmentTag.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rtcb *RecruitmentTagCreateBulk) OnConflictColumns(columns ...string) *RecruitmentTagUpsertBulk {
	rtcb.conflict = append(rtcb.conflict, sql.ConflictColumns(columns...))
	return &RecruitmentTagUpsertBulk{
		create: rtcb,
	}
}

// RecruitmentTagUpsertBulk is the builder for "upsert"-ing
// a bulk of RecruitmentTag nodes.
type RecruitmentTagUpsertBulk struct {
	create *RecruitmentTagCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RecruitmentTag.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(recruitmenttag.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *RecruitmentTagUpsertBulk) UpdateNewValues() *RecruitmentTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(recruitmenttag.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(recruitmenttag.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RecruitmentTag.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *RecruitmentTagUpsertBulk) Ignore() *RecruitmentTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RecruitmentTagUpsertBulk) DoNothing() *RecruitmentTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RecruitmentTagCreateBulk.OnConflict
// documentation for more info.
func (u *RecruitmentTagUpsertBulk) Update(set func(*RecruitmentTagUpsert)) *RecruitmentTagUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RecruitmentTagUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RecruitmentTagUpsertBulk) SetCreatedAt(v time.Time) *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RecruitmentTagUpsertBulk) UpdateCreatedAt() *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RecruitmentTagUpsertBulk) SetUpdatedAt(v time.Time) *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RecruitmentTagUpsertBulk) UpdateUpdatedAt() *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetRecruitmentID sets the "recruitment_id" field.
func (u *RecruitmentTagUpsertBulk) SetRecruitmentID(v string) *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetRecruitmentID(v)
	})
}

// UpdateRecruitmentID sets the "recruitment_id" field to the value that was provided on create.
func (u *RecruitmentTagUpsertBulk) UpdateRecruitmentID() *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateRecruitmentID()
	})
}

// SetTagID sets the "tag_id" field.
func (u *RecruitmentTagUpsertBulk) SetTagID(v string) *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.SetTagID(v)
	})
}

// UpdateTagID sets the "tag_id" field to the value that was provided on create.
func (u *RecruitmentTagUpsertBulk) UpdateTagID() *RecruitmentTagUpsertBulk {
	return u.Update(func(s *RecruitmentTagUpsert) {
		s.UpdateTagID()
	})
}

// Exec executes the query.
func (u *RecruitmentTagUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RecruitmentTagCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RecruitmentTagCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RecruitmentTagUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
