// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type Error interface {
	IsError()
}

type LoginUserError interface {
	IsLoginUserError()
}

type Node interface {
	IsNode()
}

type Applicant struct {
	Message     string       `json:"message"`
	CreatedAt   time.Time    `json:"createdAt"`
	Recruitment *Recruitment `json:"recruitment"`
}

type Competition struct {
	ID         string `json:"id"`
	DatabaseID *int   `json:"databaseId"`
	Name       string `json:"name"`
}

func (Competition) IsNode() {}

type CreateTagInput struct {
	Name string `json:"name"`
}

type Entrie struct {
	User *User `json:"user"`
}

type LoginUserAuthenticationError struct {
	Message string `json:"message"`
}

func (LoginUserAuthenticationError) IsLoginUserError() {}
func (LoginUserAuthenticationError) IsError()          {}

type LoginUserInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginUserInvalidInputError struct {
	Message string                     `json:"message"`
	Field   LoginUserInvalidInputField `json:"field"`
}

func (LoginUserInvalidInputError) IsLoginUserError() {}
func (LoginUserInvalidInputError) IsError()          {}

type LoginUserPayload struct {
	User       *User            `json:"user"`
	UserErrors []LoginUserError `json:"userErrors"`
}

type Message struct {
	Content   *string    `json:"content"`
	Applicant *Applicant `json:"applicant"`
	User      *User      `json:"user"`
	CreatedAt time.Time  `json:"createdAt"`
}

type PageInfo struct {
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
}

type Prefecture struct {
	ID         string `json:"id"`
	DatabaseID *int   `json:"databaseId"`
	Name       string `json:"name"`
}

func (Prefecture) IsNode() {}

type Recruitment struct {
	ID          string       `json:"id"`
	DatabaseID  *int         `json:"databaseId"`
	Title       string       `json:"title"`
	Detail      *string      `json:"detail"`
	Type        Type         `json:"type"`
	Place       *string      `json:"place"`
	StartAt     *time.Time   `json:"startAt"`
	LocationLat *float64     `json:"locationLat"`
	LocationLng *float64     `json:"locationLng"`
	Status      Status       `json:"status"`
	ClosingAt   *time.Time   `json:"closingAt"`
	UpdatedAt   time.Time    `json:"updatedAt"`
	CreatedAt   time.Time    `json:"createdAt"`
	PublishedAt *time.Time   `json:"publishedAt"`
	Competition *Competition `json:"competition"`
	Prefecture  *Prefecture  `json:"prefecture"`
	User        *User        `json:"user"`
	Tags        []*Tag       `json:"tags"`
	Applicant   *Applicant   `json:"applicant"`
}

func (Recruitment) IsNode() {}

type RecruitmentConnection struct {
	PageInfo *PageInfo          `json:"pageInfo"`
	Edges    []*RecruitmentEdge `json:"edges"`
}

func (RecruitmentConnection) IsConnection() {}

type RecruitmentEdge struct {
	Cursor string       `json:"cursor"`
	Node   *Recruitment `json:"node"`
}

func (RecruitmentEdge) IsEdge() {}

type RegisterUserInput struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RegisterUserInvalidInputError struct {
	Message string                        `json:"message"`
	Field   RegisterUserInvalidInputField `json:"field"`
}

func (RegisterUserInvalidInputError) IsError() {}

type RegisterUserPayload struct {
	User       *User                            `json:"user"`
	UserErrors []*RegisterUserInvalidInputError `json:"userErrors"`
}

type Room struct {
	ID     string  `json:"id"`
	Entrie *Entrie `json:"entrie"`
}

type Tag struct {
	ID         string `json:"id"`
	DatabaseID *int   `json:"databaseId"`
	Name       string `json:"name"`
}

func (Tag) IsNode() {}

type User struct {
	ID                      string                  `json:"id"`
	DatabaseID              *int                    `json:"databaseId"`
	Name                    string                  `json:"name"`
	Email                   string                  `json:"email"`
	Role                    Role                    `json:"role"`
	Avatar                  string                  `json:"avatar"`
	Introduction            *string                 `json:"introduction"`
	EmailVerificationStatus EmailVerificationStatus `json:"emailVerificationStatus"`
}

func (User) IsNode() {}

type ApplicantInput struct {
	Message string `json:"message"`
}

type CreateMessageInput struct {
	Content string `json:"content"`
}

type RecruitmentInput struct {
	Title         string                 `json:"title"`
	CompetitionID string                 `json:"competitionId"`
	Type          Type                   `json:"type"`
	Detail        *string                `json:"detail"`
	PrefectureID  *string                `json:"prefectureId"`
	Place         *string                `json:"place"`
	StartAt       *time.Time             `json:"startAt"`
	ClosingAt     *time.Time             `json:"closingAt"`
	LocationLat   *float64               `json:"locationLat"`
	LocationLng   *float64               `json:"locationLng"`
	Status        Status                 `json:"status"`
	Tags          []*RecruitmentTagInput `json:"tags"`
}

type RecruitmentTagInput struct {
	ID    string `json:"id"`
	Name  string `json:"name"`
	IsNew bool   `json:"isNew"`
}

type EmailVerificationStatus string

const (
	EmailVerificationStatusPending  EmailVerificationStatus = "PENDING"
	EmailVerificationStatusVerified EmailVerificationStatus = "VERIFIED"
)

var AllEmailVerificationStatus = []EmailVerificationStatus{
	EmailVerificationStatusPending,
	EmailVerificationStatusVerified,
}

func (e EmailVerificationStatus) IsValid() bool {
	switch e {
	case EmailVerificationStatusPending, EmailVerificationStatusVerified:
		return true
	}
	return false
}

func (e EmailVerificationStatus) String() string {
	return string(e)
}

func (e *EmailVerificationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailVerificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailVerificationStatus", str)
	}
	return nil
}

func (e EmailVerificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LoginUserInvalidInputField string

const (
	LoginUserInvalidInputFieldEmail    LoginUserInvalidInputField = "EMAIL"
	LoginUserInvalidInputFieldPassword LoginUserInvalidInputField = "PASSWORD"
)

var AllLoginUserInvalidInputField = []LoginUserInvalidInputField{
	LoginUserInvalidInputFieldEmail,
	LoginUserInvalidInputFieldPassword,
}

func (e LoginUserInvalidInputField) IsValid() bool {
	switch e {
	case LoginUserInvalidInputFieldEmail, LoginUserInvalidInputFieldPassword:
		return true
	}
	return false
}

func (e LoginUserInvalidInputField) String() string {
	return string(e)
}

func (e *LoginUserInvalidInputField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LoginUserInvalidInputField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LoginUserInvalidInputField", str)
	}
	return nil
}

func (e LoginUserInvalidInputField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RegisterUserInvalidInputField string

const (
	RegisterUserInvalidInputFieldName     RegisterUserInvalidInputField = "NAME"
	RegisterUserInvalidInputFieldEmail    RegisterUserInvalidInputField = "EMAIL"
	RegisterUserInvalidInputFieldPassword RegisterUserInvalidInputField = "PASSWORD"
)

var AllRegisterUserInvalidInputField = []RegisterUserInvalidInputField{
	RegisterUserInvalidInputFieldName,
	RegisterUserInvalidInputFieldEmail,
	RegisterUserInvalidInputFieldPassword,
}

func (e RegisterUserInvalidInputField) IsValid() bool {
	switch e {
	case RegisterUserInvalidInputFieldName, RegisterUserInvalidInputFieldEmail, RegisterUserInvalidInputFieldPassword:
		return true
	}
	return false
}

func (e RegisterUserInvalidInputField) String() string {
	return string(e)
}

func (e *RegisterUserInvalidInputField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RegisterUserInvalidInputField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RegisterUserInvalidInputField", str)
	}
	return nil
}

func (e RegisterUserInvalidInputField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin   Role = "ADMIN"
	RoleGeneral Role = "GENERAL"
)

var AllRole = []Role{
	RoleAdmin,
	RoleGeneral,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleGeneral:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusDraft     Status = "DRAFT"
	StatusPublished Status = "PUBLISHED"
	StatusClosed    Status = "CLOSED"
)

var AllStatus = []Status{
	StatusDraft,
	StatusPublished,
	StatusClosed,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusDraft, StatusPublished, StatusClosed:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Type string

const (
	TypeOpponent   Type = "OPPONENT"
	TypeIndividual Type = "INDIVIDUAL"
	TypeMember     Type = "MEMBER"
	TypeJoining    Type = "JOINING"
	TypeOthers     Type = "OTHERS"
)

var AllType = []Type{
	TypeOpponent,
	TypeIndividual,
	TypeMember,
	TypeJoining,
	TypeOthers,
}

func (e Type) IsValid() bool {
	switch e {
	case TypeOpponent, TypeIndividual, TypeMember, TypeJoining, TypeOthers:
		return true
	}
	return false
}

func (e Type) String() string {
	return string(e)
}

func (e *Type) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Type(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

func (e Type) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
