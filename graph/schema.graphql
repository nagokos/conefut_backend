# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar DateTime

enum Role {
  ADMIN
  GENERAL
}

enum EmailVerificationStatus {
  UNNECESSARY
  PENDING
  VERIFIED
}

enum Type {
  UNNECESSARY
  OPPONENT
  INDIVIDUAL
  TEAMMATE
  JOINING
  COACHING
  OTHERS
}

enum Level {
  UNNECESSARY
  ENJOY
  BEGINNER
  MIDDLE
  EXPERT
  OPEN
}

enum Status {
  DRAFT
  PUBLISHED
  CLOSED
}

type User {
  id: String!
  name: String!
  email: String!
  role: Role!
  avatar: String!
  introduction: String
  emailVerificationStatus: EmailVerificationStatus!
}

type Prefecture {
  id: String!
  name: String!
}

type Competition {
  id: String!
  name: String!
}

type Recruitment {
  id: String!
  title: String!
  content: String
  type: Type!
  level: Level!
  place: String
  startAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status!
  capacity: Int
  closingAt: DateTime
  updatedAt: DateTime!
  competition: Competition
  prefecture: Prefecture
  user: User!
}

type Query {
  getPrefectures: [Prefecture!]!
  getCurrentUser: User
  getCompetitions: [Competition!]!
  getRecruitments: [Recruitment!]!
  getCurrentUserRecruitments(status: Status!): [Recruitment!]!
  getRecruitment(id: String!): Recruitment!
}

input createUserInput {
  name: String!
  email: String!
  password: String!
}

input loginUserInput {
  email: String!
  password: String!
}

input recruitmentInput {
  title: String!
  content: String
  type: Type!
  level: Level!
  place: String
  startAt: DateTime
  locationLat: Float
  locationLng: Float
  capacity: Int
  status: Status!
  closingAt: DateTime
  competitionId: String
  prefectureId: String
}

type Mutation {
  createUser(input: createUserInput!): User!
  loginUser(input: loginUserInput!): User!
  logoutUser: Boolean!
  createRecruitment(input: recruitmentInput!): Recruitment!
  updateRecruitment(id: String!, input: recruitmentInput!): Recruitment!
  deleteRecruitment(id: String!): Boolean!
}
