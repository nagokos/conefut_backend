# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar DateTime

enum Role {
  ADMIN
  GENERAL
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
}

enum Type {
  OPPONENT
  INDIVIDUAL
  MEMBER
  JOINING
  OTHERS
}

enum Status {
  DRAFT
  PUBLISHED
  CLOSED
}

type PageInfo {
  startCursor: String!
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input paginationInput {
  first: Int
  after: String
  last: Int
  before: String
  options: searchRecruitmentInput
}

input searchRecruitmentInput {
  competitionId: String
  prefectureId: String
  type: String
  startAt: DateTime
}

type User {
  id: String!
  name: String!
  email: String!
  role: Role!
  avatar: String!
  introduction: String
  emailVerificationStatus: EmailVerificationStatus!
}

type Prefecture {
  id: String!
  name: String!
}

type Applicant {
  createdAt: DateTime!
}

type Competition {
  id: String!
  name: String!
}

type Recruitment {
  id: String!
  title: String!
  detail: String
  type: Type!
  place: String
  startAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status!
  closingAt: DateTime
  updatedAt: DateTime!
  createdAt: DateTime!
  published_at: DateTime
  competition: Competition
  prefecture: Prefecture
  user: User!
  tags: [Tag]!
  applicant: Applicant
}

type RecruitmentConnection {
  pageInfo: PageInfo!
  edges: [RecruitmentEdge!]!
}

type RecruitmentEdge {
  cursor: String!
  node: Recruitment!
}

type Tag {
  id: String!
  name: String!
}

type Query {
  # prefecture
  getPrefectures: [Prefecture!]!

  # user
  getCurrentUser: User

  # competition
  getCompetitions: [Competition!]!

  # recruitment
  getRecruitments(input: paginationInput!): RecruitmentConnection!
  getCurrentUserRecruitments: [Recruitment!]!
  getRecruitment(id: String!): Recruitment!
  getStockedRecruitments: [Recruitment!]!
  getAppliedRecruitments: [Recruitment!]!

  # stock
  checkStocked(recruitmentId: String!): Boolean!
  getStockedCount(recruitmentId: String!): Int!

  # tag
  getTags: [Tag!]!

  # applicant
  checkAppliedForRecruitment(recruitmentId: String!): Boolean!
  getAppliedCounts(recruitmentId: String!): Int!
}

input createUserInput {
  name: String!
  email: String!
  password: String!
}

input loginUserInput {
  email: String!
  password: String!
}

input recruitmentInput {
  title: String!
  competitionId: String!
  type: Type!
  detail: String
  prefectureId: String
  place: String
  startAt: DateTime
  closingAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status!
  tags: [recruitmentTagInput]!
}

input recruitmentTagInput {
  id: String!
  name: String!
  isNew: Boolean!
}

input createTagInput {
  name: String!
}

input applicantInput {
  message: String!
}

type Mutation {
  # user
  createUser(input: createUserInput!): Boolean!
  loginUser(input: loginUserInput!): Boolean!
  logoutUser: Boolean!

  # recruitment
  createRecruitment(input: recruitmentInput!): Recruitment!
  updateRecruitment(id: String!, input: recruitmentInput!): Recruitment!
  deleteRecruitment(id: String!): Recruitment!

  # stock
  createStock(recruitmentId: String!): Boolean!
  deleteStock(recruitmentId: String!): Boolean!

  # tag
  createTag(input: createTagInput!): Tag!

  # recruitment_tags
  addRecruitmentTag(tagId: String!, recruitmentId: String!): Boolean!

  # applicant
  applyForRecruitment(recruitmentId: String!, input: applicantInput): Boolean!
}
