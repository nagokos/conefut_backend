scalar DateTime

interface Connection {
  pageInfo: PageInfo!
  edges: [Edge!]!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Node {
  id: ID!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input paginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

interface Error {
  message: String!
}

type Applicant {
  message: String!
  createdAt: DateTime!
  recruitment: Recruitment!
}

type Tag {
  id: String!
  name: String!
}

type Room {
  id: String!
  entrie: Entrie!
}

type Entrie {
  user: User!
}

type Message {
  content: String
  applicant: Applicant
  user: User!
  createdAt: DateTime!
}

type Query {
  # node
  node(id: ID!): Node

  # stock
  checkStocked(recruitmentId: String!): Boolean!
  getStockedCount(recruitmentId: String!): Int!

  # tag
  getTags: [Tag!]!

  # applicant
  checkAppliedForRecruitment(recruitmentId: String!): Boolean!
  getAppliedCounts(recruitmentId: String!): Int!

  # room
  getCurrentUserRooms: [Room!]!

  # entrie
  getEntrieUser(roomId: String!): User!

  # message
  getRoomMessages(roomId: String!): [Message!]!
}

input recruitmentTagInput {
  id: String!
  name: String!
  isNew: Boolean!
}

input createTagInput {
  name: String!
}

input applicantInput {
  message: String!
}

input createMessageInput {
  content: String!
}

type Mutation {
  # stock
  createStock(recruitmentId: String!): Boolean!
  deleteStock(recruitmentId: String!): Boolean!

  # tag
  createTag(input: createTagInput!): Tag!

  # recruitment_tags
  addRecruitmentTag(tagId: String!, recruitmentId: String!): Boolean!

  # applicant
  applyForRecruitment(recruitmentId: String!, input: applicantInput): Boolean!

  # message
  createMessage(roomId: String!, input: createMessageInput!): Message!
}
