extend type Query {
  viewer: Viewer!
  user(id: ID!): User!
}

enum Role {
  ADMIN
  GENERAL
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
}

type Viewer {
  accountUser: User
}

type User implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  name: String!
  email: String!
  unverifiedEmail: String
  avatar: String!
  introduction: String
  role: Role!
  emailVerificationStatus: EmailVerificationStatus!
    @goField(forceResolver: true)
  recruitments(first: Int, after: String): RecruitmentConnection
  followings(first: Int, after: String): FollowConnection
  feedbackFollow: FeedbackFollow!
}

# *** Mutation ***
extend type Mutation {
  registerUser(input: RegisterUserInput!): RegisterUserResult!
  loginUser(input: LoginUserInput!): LoginUserResult!
  logoutUser: Boolean!
  sendVerifyEmail: Boolean! @hasLoggedIn
  sendVerifyNewEmail(
    input: SendVerifyNewEmailInput!
  ): SendVerifyNewEmailResult! @hasLoggedIn
  changePassword(input: ChangePasswordInput!): ChangePasswordResult!
    @hasLoggedIn
  verifyEmail(input: VerifyEmailInput!): VerifyEmailResult! @hasLoggedIn
  sendResetPasswordEmail(
    input: SendResetPasswordEmailInput!
  ): SendResetPasswordEmailResult!
}

#* Register
union RegisterUserResult = RegisterUserSuccess | RegisterUserInvalidInputErrors

type RegisterUserSuccess {
  viewer: Viewer!
}

type RegisterUserInvalidInputErrors {
  invalidInputs: [RegisterUserInvalidInputError!]!
}

type RegisterUserInvalidInputError implements Error {
  message: String!
  field: RegisterUserInvalidInputField!
}

enum RegisterUserInvalidInputField {
  NAME
  EMAIL
  PASSWORD
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

#* Login
union LoginUserResult =
    LoginUserSuccess
  | LoginUserInvalidInputErrors
  | LoginUserNotFoundError
  | LoginUserAuthenticationError

type LoginUserSuccess {
  viewer: Viewer!
}

type LoginUserAuthenticationError implements Error {
  message: String!
}

type LoginUserInvalidInputErrors {
  invalidInputs: [LoginUserInvalidInputError!]!
}

type LoginUserInvalidInputError implements Error {
  message: String!
  field: LoginUserInvalidInputField!
}

type LoginUserNotFoundError implements Error {
  message: String!
}

enum LoginUserInvalidInputField {
  EMAIL
  PASSWORD
}

input LoginUserInput {
  email: String!
  password: String!
}

#* NewEmail
union SendVerifyNewEmailResult =
    SendVerifyNewEmailSuccess
  | SendVerifyNewEmailInvalidInputErrors

type SendVerifyNewEmailSuccess {
  viewer: Viewer!
}

type SendVerifyNewEmailInvalidInputErrors {
  invalidInputs: [SendVerifyNewEmailInvalidInputError!]!
}

type SendVerifyNewEmailInvalidInputError implements Error {
  message: String!
  field: SendVerifyNewEmailInvalidInputField!
}

enum SendVerifyNewEmailInvalidInputField {
  EMAIL
}

input SendVerifyNewEmailInput {
  email: String!
}

#* ChangePassword
union ChangePasswordResult =
    ChangePasswordSuccess
  | ChangePasswordInvalidInputErrors
  | ChangePasswordAuthenticationError

type ChangePasswordSuccess {
  isChangedPassword: Boolean!
}

type ChangePasswordAuthenticationError implements Error {
  message: String!
}

type ChangePasswordInvalidInputErrors {
  invalidInputs: [ChangePasswordInvalidInputError!]!
}

type ChangePasswordInvalidInputError implements Error {
  message: String!
  field: ChangePasswordInvalidInputField!
}

enum ChangePasswordInvalidInputField {
  CURRENT_PASSWORD
  NEW_PASSWORD
  NEW_PASSWORD_CONFIRMATION
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  newPasswordConfirmation: String!
}

#* VerifyEmail
union VerifyEmailResult =
    VerifyEmailSuccess
  | VerifyEmailAuthenticationError
  | VerifyEmailPinExpiredError
  | VerifyEmailInvalidInputErrors

type VerifyEmailSuccess {
  viewer: Viewer!
}

type VerifyEmailAuthenticationError implements Error {
  message: String!
}

type VerifyEmailPinExpiredError implements Error {
  message: String!
}

type VerifyEmailInvalidInputErrors {
  invalidInputs: [VerifyEmailInvalidInputError!]!
}

type VerifyEmailInvalidInputError implements Error {
  message: String!
  field: VerifyEmailInvalidInputField!
}

enum VerifyEmailInvalidInputField {
  CODE
}

input VerifyEmailInput {
  code: String!
}

#* ResetPassword
union SendResetPasswordEmailResult =
    SendResetPasswordEmailSuccess
  | SendResetPasswordEmailInvalidInputError
  | SendResetPasswordEmailUserNotFoundError

type SendResetPasswordEmailSuccess {
  isSendEmail: Boolean!
}

type SendResetPasswordEmailInvalidInputError {
  field: SendResetPasswordEmailInvalidInputField!
  message: String!
}

type SendResetPasswordEmailUserNotFoundError {
  message: String!
}

enum SendResetPasswordEmailInvalidInputField {
  EMAIL
}

input SendResetPasswordEmailInput {
  email: String!
}
