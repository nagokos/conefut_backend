extend type Query {
  viewer: User
  user(id: ID!): User!
}

enum Role {
  ADMIN
  GENERAL
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
}

type User implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  name: String!
  email: String!
  avatar: String!
  introduction: String
  role: Role!
  emailVerificationStatus: EmailVerificationStatus!
  recruitments(first: Int, after: String): RecruitmentConnection
  followings(first: Int, after: String): FollowConnection
}

# *** Mutation ***
extend type Mutation {
  registerUser(input: RegisterUserInput!): RegisterUserPayload!
  loginUser(input: LoginUserInput!): LoginUserPayload!
  logoutUser: Boolean!
}

# Register
type RegisterUserPayload {
  viewer: User
  userErrors: [RegisterUserInvalidInputError!]!
}

type RegisterUserInvalidInputError implements Error {
  message: String!
  field: RegisterUserInvalidInputField!
}

enum RegisterUserInvalidInputField {
  NAME
  EMAIL
  PASSWORD
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

# Login
type LoginUserPayload {
  viewer: User
  userErrors: [LoginUserError!]!
}

union LoginUserError = LoginUserAuthenticationError | LoginUserInvalidInputError

type LoginUserAuthenticationError implements Error {
  message: String!
}

type LoginUserInvalidInputError implements Error {
  message: String!
  field: LoginUserInvalidInputField!
}

enum LoginUserInvalidInputField {
  EMAIL
  PASSWORD
}

input LoginUserInput {
  email: String!
  password: String!
}
