extend type Query {
  viewer: User
  user(id: ID!): User!
}

enum Role {
  ADMIN
  GENERAL
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
}

type User implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  name: String!
  email: String!
  unverifiedEmail: String
  avatar: String!
  introduction: String
  role: Role!
  emailVerificationStatus: EmailVerificationStatus!
    @goField(forceResolver: true)
  recruitments(first: Int, after: String): RecruitmentConnection
  followings(first: Int, after: String): FollowConnection
}

# *** Mutation ***
extend type Mutation {
  registerUser(input: RegisterUserInput!): RegisterUserPayload!
  loginUser(input: LoginUserInput!): LoginUserPayload!
  logoutUser: Boolean!
  sendVerifyEmail: Boolean!
  sendVerifyNewEmail(
    input: SendVerifyNewEmailInput!
  ): SendVerifyNewEmailPayload!
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailPayload
}

#* Register
type RegisterUserPayload {
  viewer: User
  userErrors: [RegisterUserInvalidInputError!]!
}

type RegisterUserInvalidInputError implements Error {
  message: String!
  field: RegisterUserInvalidInputField!
}

enum RegisterUserInvalidInputField {
  NAME
  EMAIL
  PASSWORD
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

#* Login
type LoginUserPayload {
  viewer: User
  userErrors: [LoginUserError!]!
}

union LoginUserError = LoginUserAuthenticationError | LoginUserInvalidInputError

type LoginUserAuthenticationError implements Error {
  message: String!
}

type LoginUserInvalidInputError implements Error {
  message: String!
  field: LoginUserInvalidInputField!
}

enum LoginUserInvalidInputField {
  EMAIL
  PASSWORD
}

input LoginUserInput {
  email: String!
  password: String!
}

#* NewEmail
type SendVerifyNewEmailPayload {
  viewer: User
  userErrors: [SendVerifyNewEmailInvalidInputError!]!
}

type SendVerifyNewEmailInvalidInputError implements Error {
  message: String!
  field: SendVerifyNewEmailInvalidInputField!
}

enum SendVerifyNewEmailInvalidInputField {
  EMAIL
}

input SendVerifyNewEmailInput {
  email: String!
}

#* ChangePassword
type ChangePasswordPayload {
  isChangedPassword: Boolean!
  userErrors: [ChangePasswordErorr!]!
}

union ChangePasswordErorr =
    ChangePasswordInvalidInputError
  | ChangePasswordAuthenticationError

type ChangePasswordAuthenticationError implements Error {
  message: String!
}

type ChangePasswordInvalidInputError implements Error {
  message: String!
  field: ChangePasswordInvalidInputField!
}

enum ChangePasswordInvalidInputField {
  CURRENT_PASSWORD
  NEW_PASSWORD
  NEW_PASSWORD_CONFIRMATION
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  newPasswordConfirmation: String!
}

#* VerifyEmail
type VerifyEmailPayload {
  viewer: User
  userErrors: [VerifyEmailErorr!]!
}

union VerifyEmailErorr =
    VerifyEmailInvalidInputError
  | VerifyEmailAuthenticationError
  | VerifyEmailPinExpiredError

type VerifyEmailAuthenticationError implements Error {
  message: String!
}

type VerifyEmailPinExpiredError implements Error {
  message: String!
}

type VerifyEmailInvalidInputError implements Error {
  message: String!
  field: VerifyEmailInvalidInputField!
}

enum VerifyEmailInvalidInputField {
  CODE
}

input VerifyEmailInput {
  code: String!
}
