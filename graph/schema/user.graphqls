extend type Query {
  viewer: Viewer!
  user(id: ID!): User!
}

enum Role {
  ADMIN
  GENERAL
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
}

type Viewer {
  accountUser: User
}

type User implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  name: String!
  email: String!
  unverifiedEmail: String
  avatar: String!
  introduction: String
  role: Role!
  emailVerificationStatus: EmailVerificationStatus!
    @goField(forceResolver: true)
  recruitments(first: Int, after: String): RecruitmentConnection
  followings(first: Int, after: String): FollowConnection
  feedbackFollow: FeedbackFollow!
}

# *** Mutation ***
extend type Mutation {
  registerUser(input: RegisterUserInput!): RegisterUserResult!
  loginUser(input: LoginUserInput!): LoginUserResult!
  logoutUser: Boolean!
  resendVerificationCodeToUser: Boolean! @hasLoggedIn
  changeUserEmail(input: ChangeUserEmailInput!): ChangeUserEmailResult!
    @hasLoggedIn
  verifyUserEmail(input: VerifyUserEmailInput!): VerifyUserEmailResult!
    @hasLoggedIn
  changeUserPassword(
    input: ChangeUserPasswordInput!
  ): ChangeUserPasswordResult! @hasLoggedIn
  sendResetPasswordEmailToUser(
    input: SendResetPasswordEmailToUserInput!
  ): SendResetPasswordEmailToUserResult!
  resetUserPassword(
    token: String!
    input: ResetUserPasswordInput!
  ): ResetUserPasswordResult!
}

#* Register
union RegisterUserResult = RegisterUserSuccess | RegisterUserInvalidInputErrors

type RegisterUserSuccess {
  viewer: Viewer!
}

type RegisterUserInvalidInputErrors {
  invalidInputs: [RegisterUserInvalidInputError!]!
}

type RegisterUserInvalidInputError implements Error {
  message: String!
  field: RegisterUserInvalidInputField!
}

enum RegisterUserInvalidInputField {
  NAME
  EMAIL
  PASSWORD
}

input RegisterUserInput {
  name: String!
  email: String!
  password: String!
}

#* Login
union LoginUserResult =
    LoginUserSuccess
  | LoginUserInvalidInputErrors
  | LoginUserNotFoundError
  | LoginUserAuthenticationError

type LoginUserSuccess {
  viewer: Viewer!
}

type LoginUserAuthenticationError implements Error {
  message: String!
}

type LoginUserInvalidInputErrors {
  invalidInputs: [LoginUserInvalidInputError!]!
}

type LoginUserInvalidInputError implements Error {
  message: String!
  field: LoginUserInvalidInputField!
}

type LoginUserNotFoundError implements Error {
  message: String!
}

enum LoginUserInvalidInputField {
  EMAIL
  PASSWORD
}

input LoginUserInput {
  email: String!
  password: String!
}

#* ChangeEmail
union ChangeUserEmailResult =
    ChangeUserEmailSuccess
  | ChangeUserEmailInvalidInputError

type ChangeUserEmailSuccess {
  viewer: Viewer!
}

type ChangeUserEmailInvalidInputError implements Error {
  message: String!
  field: ChangeUserEmailInvalidInputField!
}

enum ChangeUserEmailInvalidInputField {
  NEW_EMAIL
}

input ChangeUserEmailInput {
  newEmail: String!
}

#* ChangePassword
union ChangeUserPasswordResult =
    ChangeUserPasswordSuccess
  | ChangeUserPasswordInvalidInputErrors
  | ChangeUserPasswordAuthenticationError

type ChangeUserPasswordSuccess {
  isChangedPassword: Boolean!
}

type ChangeUserPasswordAuthenticationError implements Error {
  message: String!
}

type ChangeUserPasswordInvalidInputErrors {
  invalidInputs: [ChangeUserPasswordInvalidInputError!]!
}

type ChangeUserPasswordInvalidInputError implements Error {
  message: String!
  field: ChangeUserPasswordInvalidInputField!
}

enum ChangeUserPasswordInvalidInputField {
  CURRENT_PASSWORD
  NEW_PASSWORD
  NEW_PASSWORD_CONFIRMATION
}

input ChangeUserPasswordInput {
  currentPassword: String!
  newPassword: String!
  newPasswordConfirmation: String!
}

#* VerifyEmail
union VerifyUserEmailResult =
    VerifyUserEmailSuccess
  | VerifyUserEmailAuthenticationError
  | VerifyUserEmailCodeExpiredError
  | VerifyUserEmailInvalidInputError

type VerifyUserEmailSuccess {
  viewer: Viewer!
}

type VerifyUserEmailAuthenticationError implements Error {
  message: String!
}

type VerifyUserEmailCodeExpiredError implements Error {
  message: String!
}

type VerifyUserEmailInvalidInputError implements Error {
  message: String!
  field: VerifyUserEmailInvalidInputField!
}

enum VerifyUserEmailInvalidInputField {
  CODE
}

input VerifyUserEmailInput {
  code: String!
}

#* SendResetPasswordEmail
union SendResetPasswordEmailToUserResult =
    SendResetPasswordEmailToUserSuccess
  | SendResetPasswordEmailToUserInvalidInputError
  | SendResetPasswordEmailToUserNotFoundError

type SendResetPasswordEmailToUserSuccess {
  isSentEmail: Boolean!
}

type SendResetPasswordEmailToUserInvalidInputError {
  field: SendResetPasswordEmailToUserInvalidInputField!
  message: String!
}

enum SendResetPasswordEmailToUserInvalidInputField {
  EMAIL
}

type SendResetPasswordEmailToUserNotFoundError {
  message: String!
}

input SendResetPasswordEmailToUserInput {
  email: String!
}

#* ResetPassword
union ResetUserPasswordResult =
    ResetUserPasswordSuccess
  | ResetUserPasswordInvalidInputErrors
  | ResetUserPasswordInvalidTokenError

type ResetUserPasswordSuccess {
  viewer: Viewer!
}

type ResetUserPasswordInvalidInputErrors {
  invalidInputs: [ResetUserPasswordInvalidInputError!]!
}

type ResetUserPasswordInvalidInputError {
  field: ResetUserPasswordInvalidInputField!
  message: String!
}

enum ResetUserPasswordInvalidInputField {
  NEW_PASSWORD
  NEW_PASSWORD_CONFIRMATION
}

type ResetUserPasswordInvalidTokenError {
  message: String!
}

input ResetUserPasswordInput {
  newPassword: String!
  newPasswordConfirmation: String!
}
