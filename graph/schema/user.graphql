# *** Query ***
extend type Query {
  getCurrentUser: User
}

enum Role {
  ADMIN
  GENERAL
}

enum EmailVerificationStatus {
  PENDING
  VERIFIED
}

type User implements Node {
  id: ID!
  databaseId: Int
  name: String!
  email: String!
  role: Role!
  avatar: String!
  introduction: String
  emailVerificationStatus: EmailVerificationStatus!
}

# *** Mutation ***
extend type Mutation {
  userRegister(input: UserRegisterInput!): UserRegisterPayload!
  userLogin(input: UserLoginInput!): UserLoginPayload!
  userLogout: Boolean!
}

# Register
type UserRegisterPayload {
  user: User
  userErrors: [UserRegisterInvalidInputError!]!
}

type UserRegisterInvalidInputError implements Error {
  message: String!
  field: UserRegisterInvalidInputField!
}

enum UserRegisterInvalidInputField {
  NAME
  EMAIL
  PASSWORD
}

input UserRegisterInput {
  name: String!
  email: String!
  password: String!
}

# Login
type UserLoginPayload {
  user: User
  userErrors: [UserLoginError!]!
}

union UserLoginError = UserLoginAuthenticationError | UserLoginInvalidInputError

type UserLoginAuthenticationError implements Error {
  message: String!
}

type UserLoginInvalidInputError implements Error {
  message: String!
  field: UserLoginInvalidInputField!
}

enum UserLoginInvalidInputField {
  EMAIL
  PASSWORD
}

input UserLoginInput {
  email: String!
  password: String!
}
