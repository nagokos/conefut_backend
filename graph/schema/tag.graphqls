extend type Query {
  tags(first: Int!): TagConnection!
}

type TagConnection implements Connection {
  pageInfo: PageInfo!
  edges: [TagEdge!]!
}

type TagEdge implements Edge {
  cursor: String! @goField(forceResolver: true)
  node: Tag!
}

type Tag implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  name: String!
}

extend type Mutation {
  createTag(input: CreateTagInput!): CreateTagResult!
}

union CreateTagResult = CreateTagSuccess | CreateTagInvalidInputErrors

type CreateTagSuccess {
  tagEdge: TagEdge!
}

type CreateTagInvalidInputErrors {
  invalidInputs: [CreateTagInvalidInputError!]!
}

type CreateTagInvalidInputError {
  field: CreateTagInvalidInputField!
  message: String!
}

enum CreateTagInvalidInputField {
  NAME
}

input CreateTagInput {
  name: String!
}
