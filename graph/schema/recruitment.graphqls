extend type Query {
  recruitments(first: Int, after: String): RecruitmentConnection!
  viewerRecruitments(first: Int, after: String): RecruitmentConnection!
    @hasLoggedIn
  recruitment(id: ID!): Recruitment!
  stockedRecruitments(first: Int, after: String): RecruitmentConnection!
    @hasLoggedIn
  appliedRecruitments: [Recruitment!]! @hasLoggedIn
}

type RecruitmentConnection implements Connection {
  pageInfo: PageInfo!
  edges: [RecruitmentEdge!]!
}

type RecruitmentEdge implements Edge {
  cursor: String! @goField(forceResolver: true)
  node: Recruitment!
}

type Recruitment implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  title: String!
  detail: String
  type: Type! @goField(forceResolver: true)
  venue: String
  startAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status! @goField(forceResolver: true)
  closingAt: DateTime
  createdAt: DateTime!
  publishedAt: DateTime
  competition: Competition!
  prefecture: Prefecture!
  user: User!
  tags: [Tag!]!
  applicant: Applicant
  FeedbackStock: FeedbackStock!
}

enum Type {
  OPPONENT
  PERSONAL
  MEMBER
  JOIN
  OTHER
}

enum Status {
  DRAFT
  PUBLISHED
  CLOSED
}

extend type Mutation {
  createRecruitment(input: RecruitmentInput!): CreateRecruitmentResult!
    @hasEmailVerified(status: VERIFIED)
    @hasLoggedIn
  updateRecruitment(
    id: ID!
    input: RecruitmentInput!
  ): UpdateRecruitmentResult! @hasEmailVerified(status: VERIFIED) @hasLoggedIn
  deleteRecruitment(id: ID!): DeleteRecruitmentResult!
    @hasEmailVerified(status: VERIFIED)
    @hasLoggedIn
}

enum RecruitmentInvalidInputField {
  TITLE
  COMPETITION_ID
  TYPE
  DETAIL
  PREFECTURE_ID
  VENUE
  START_AT
  CLOSING_AT
}

input RecruitmentInput {
  title: String!
  competitionId: ID!
  type: Type!
  detail: String
  prefectureId: ID!
  venue: String
  startAt: DateTime
  closingAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status!
  tagIds: [ID!]!
}

#* CreateRecruitment
union CreateRecruitmentResult =
    CreateRecruitmentSuccess
  | CreateRecruitmentInvalidInputErrors

type CreateRecruitmentSuccess {
  recruitmentEdge: RecruitmentEdge!
}

type CreateRecruitmentInvalidInputErrors {
  invalidInputs: [CreateRecruitmentInvalidInputError!]!
}

type CreateRecruitmentInvalidInputError {
  field: RecruitmentInvalidInputField!
  message: String!
}

#* UpdateRecruitment
union UpdateRecruitmentResult =
    UpdateRecruitmentSuccess
  | UpdateRecruitmentInvalidInputErrors

type UpdateRecruitmentSuccess {
  recruitment: Recruitment!
}

type UpdateRecruitmentInvalidInputErrors {
  invalidInputs: [UpdateRecruitmentInvalidInputError!]!
}

type UpdateRecruitmentInvalidInputError {
  field: RecruitmentInvalidInputField!
  message: String!
}

#* deleteRecruitment
type DeleteRecruitmentResult {
  deletedRecruitmentId: ID!
}
