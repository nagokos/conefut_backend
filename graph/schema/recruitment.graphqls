extend type Query {
  recruitments(first: Int, after: String): RecruitmentConnection!
  currentUserRecruitments(first: Int, after: String): RecruitmentConnection!
  recruitment(id: String!): Recruitment!
  stockedRecruitments: [Recruitment!]!
  appliedRecruitments: [Recruitment!]!
}

type RecruitmentConnection implements Connection {
  pageInfo: PageInfo!
  edges: [RecruitmentEdge!]!
}

type RecruitmentEdge implements Edge {
  cursor: String!
  node: Recruitment!
}

type Recruitment implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  title: String!
  detail: String
  type: Type!
  venue: String
  startAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status!
  closingAt: DateTime
  createdAt: DateTime!
  publishedAt: DateTime
  competition: Competition!
  prefecture: Prefecture
  user: User!
  tags: [Tag]!
  applicant: Applicant
}

enum Type {
  OPPONENT
  PERSONAL
  MEMBER
  JOIN
  OTHER
}

enum Status {
  DRAFT
  PUBLISHED
  CLOSED
}

extend type Mutation {
  createRecruitment(input: RecruitmentInput!): RecruitmentEdge!
    @emailVerified(status: VERIFIED)
    @hasLoggedIn
  updateRecruitment(id: String!, input: RecruitmentInput!): Recruitment!
  deleteRecruitment(id: String!): Recruitment!
}

input RecruitmentInput {
  title: String!
  competitionId: String!
  type: Type!
  detail: String
  prefectureId: String
  venue: String
  startAt: DateTime
  closingAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status!
  tags: [recruitmentTagInput]!
}
