extend type Query {
  recruitments(first: Int, after: String): RecruitmentConnection!
  viewerRecruitments(first: Int, after: String): RecruitmentConnection!
  recruitment(id: ID!): Recruitment!
  stockedRecruitments(first: Int, after: String): RecruitmentConnection!
  appliedRecruitments: [Recruitment!]!
}

type RecruitmentConnection implements Connection {
  pageInfo: PageInfo!
  edges: [RecruitmentEdge!]!
}

type RecruitmentEdge implements Edge {
  cursor: String!
  node: Recruitment!
}

type Recruitment implements Node {
  id: ID! @goField(forceResolver: true)
  databaseId: Int!
  title: String!
  detail: String
  type: Type! @goField(forceResolver: true)
  venue: String
  startAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status! @goField(forceResolver: true)
  closingAt: DateTime
  createdAt: DateTime!
  publishedAt: DateTime
  competition: Competition!
  prefecture: Prefecture!
  user: User!
  tags: [Tag]!
  applicant: Applicant
}

enum Type {
  OPPONENT
  PERSONAL
  MEMBER
  JOIN
  OTHER
}

enum Status {
  DRAFT
  PUBLISHED
  CLOSED
}

extend type Mutation {
  createRecruitment(input: RecruitmentInput!): CreateRecruitmentPayload!
    @emailVerified(status: VERIFIED)
    @hasLoggedIn
  updateRecruitment(
    id: ID!
    input: RecruitmentInput!
  ): UpdateRecruitmentPayload! @emailVerified(status: VERIFIED) @hasLoggedIn
  deleteRecruitment(id: ID!): DeleteRecruitmentPayload!
    @emailVerified(status: VERIFIED)
    @hasLoggedIn
}

type CreateRecruitmentPayload {
  feedbackRecruitmentEdge: RecruitmentEdge!
}

type UpdateRecruitmentPayload {
  feedbackRecruitmentEdge: RecruitmentEdge!
  deletedRecruitmentId: ID
}

type DeleteRecruitmentPayload {
  deletedRecruitmentId: ID!
}

input RecruitmentInput {
  title: String!
  competitionId: ID!
  type: Type!
  detail: String
  prefectureId: ID!
  venue: String
  startAt: DateTime
  closingAt: DateTime
  locationLat: Float
  locationLng: Float
  status: Status!
  tagIds: [ID!]!
}
